{"version":3,"sources":["Wrap.web.tsx"],"names":["React","forwardRef","tagMessage","Wrap","children","ref","child","Children","only","isRNSVGNode","Object","getPrototypeOf","type","name","clone","cloneElement","props","display","e","Error","AnimatedWrap"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,OAAO,MAAMC,IAAI,gBAAGF,UAAU,CAC5B,CAAC;AAAEG,EAAAA;AAAF,CAAD,EAAeC,GAAf,KAAuB;AACrB,MAAI;AAAA;;AACF;AACA,UAAMC,KAAU,GAAGN,KAAK,CAACO,QAAN,CAAeC,IAAf,CAAoBJ,QAApB,CAAnB;AAEA,UAAMK,WAAW,GACf,0BAAAC,MAAM,CAACC,cAAP,CAAsBL,KAAtB,aAAsBA,KAAtB,uBAAsBA,KAAK,CAAEM,IAA7B,iFAAoCC,IAApC,MAA6C,UAD/C;;AAGA,QAAIJ,WAAJ,EAAiB;AACf,YAAMK,KAAK,gBAAGd,KAAK,CAACe,YAAN,CACZT,KADY,EAEZ;AAAED,QAAAA;AAAF,OAFY,EAGZ;AACAC,MAAAA,KAAK,CAACU,KAAN,CAAYZ,QAJA,CAAd;AAOA,aAAOU,KAAP;AACD;;AAED,wBACE;AACE,MAAA,GAAG,EAAET,GADP;AAEE,MAAA,KAAK,EAAE;AAAEY,QAAAA,OAAO,EAAE;AAAX;AAFT,OAGGX,KAHH,CADF;AAOD,GAzBD,CAyBE,OAAOY,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CACJjB,UAAU,CACP,2KADO,CADN,CAAN;AAKD;AACF,CAlC2B,CAAvB,C,CAqCP;AACA;;AACA,OAAO,MAAMkB,YAAY,GAAGjB,IAArB","sourcesContent":["import React, { forwardRef } from 'react';\nimport type { LegacyRef, PropsWithChildren } from 'react';\nimport { tagMessage } from '../../../utils';\n\nexport const Wrap = forwardRef<HTMLDivElement, PropsWithChildren<{}>>(\n  ({ children }, ref) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const child: any = React.Children.only(children);\n\n      const isRNSVGNode =\n        Object.getPrototypeOf(child?.type)?.name === 'WebShape';\n\n      if (isRNSVGNode) {\n        const clone = React.cloneElement(\n          child,\n          { ref },\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          child.props.children\n        );\n\n        return clone;\n      }\n\n      return (\n        <div\n          ref={ref as LegacyRef<HTMLDivElement>}\n          style={{ display: 'contents' }}>\n          {child}\n        </div>\n      );\n    } catch (e) {\n      throw new Error(\n        tagMessage(\n          `GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n        )\n      );\n    }\n  }\n);\n\n// On web we never take a path with Reanimated,\n// therefore we can simply export Wrap\nexport const AnimatedWrap = Wrap;\n"]}