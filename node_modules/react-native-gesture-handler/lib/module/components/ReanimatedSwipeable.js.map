{"version":3,"sources":["ReanimatedSwipeable.tsx"],"names":["React","forwardRef","useCallback","useImperativeHandle","useMemo","GestureObjects","Gesture","GestureDetector","Animated","interpolate","runOnJS","useAnimatedStyle","useSharedValue","withSpring","I18nManager","StyleSheet","View","DRAG_TOSS","SwipeDirection","Swipeable","props","ref","defaultProps","friction","overshootFriction","dragOffset","enableTrackpadTwoFingerGesture","leftThreshold","rightThreshold","enabled","containerStyle","childrenContainerStyle","animationOptions","overshootLeft","overshootRight","testID","children","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","onSwipeableOpenStartDrag","onSwipeableCloseStartDrag","onSwipeableWillOpen","onSwipeableWillClose","onSwipeableOpen","onSwipeableClose","renderLeftActions","renderRightActions","remainingProps","rowState","userDrag","appliedTranslation","rowWidth","leftWidth","rightWidth","rightOffset","showLeftProgress","showRightProgress","updateRightElementWidth","value","Math","max","updateAnimatedEvent","shouldOvershootLeft","shouldOvershootRight","startOffset","offsetDrag","dispatchImmediateEvents","fromValue","toValue","RIGHT","LEFT","dispatchEndEvents","animateRow","velocityX","translationSpringConfig","duration","dampingRatio","stiffness","velocity","overshootClamping","isClosing","moveToRight","usedWidth","progressSpringConfig","restDisplacementThreshold","restSpeedThreshold","frozenRowState","isFinished","progressTarget","sign","swipeableMethods","close","openLeft","openRight","reset","onRowLayout","nativeEvent","layout","width","leftElement","styles","leftActions","x","rightElement","rightActions","handleRelease","event","translationX","leftThresholdProp","rightThresholdProp","dragStarted","tapGesture","Tap","shouldCancelWhenOutside","onStart","panGesture","Pan","activeOffsetX","onUpdate","direction","onEnd","onFinalize","animatedStyle","transform","translateX","pointerEvents","swipeableComponent","container","create","overflow","absoluteFillObject","flexDirection","isRTL"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\nimport {\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../handlers/gestureHandlerCommon';\nimport type { PanGestureHandlerProps } from '../handlers/PanGestureHandler';\nimport type { PanGestureHandlerEventPayload } from '../handlers/GestureHandlerEventPayload';\nimport Animated, {\n  SharedValue,\n  interpolate,\n  runOnJS,\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\nimport {\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nenum SwipeDirection {\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * `progress`: Equals `0` when `swipeable` is closed, `1` when `swipeable` is opened.\n   *  - When the element overshoots it's opened position the value tends towards `Infinity`.\n   *  - Goes back to `1` when `swipeable` is released.\n   *\n   * `translation`: a horizontal offset of the `swipeable` relative to its closed position.\\\n   * `swipeableMethods`: provides an object exposing methods for controlling the `swipeable`.\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progress: SharedValue<number>,\n    translation: SharedValue<number>,\n    swipeableMethods: SwipeableMethods\n  ) => React.ReactNode;\n\n  /**\n   * `progress`: Equals `0` when `swipeable` is closed, `1` when `swipeable` is opened.\n   *  - When the element overshoots it's opened position the value tends towards `Infinity`.\n   *  - Goes back to `1` when `swipeable` is released.\n   *\n   * `translation`: a horizontal offset of the `swipeable` relative to its closed position.\\\n   * `swipeableMethods`: provides an object exposing methods for controlling the `swipeable`.\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progress: SharedValue<number>,\n    translation: SharedValue<number>,\n    swipeableMethods: SwipeableMethods\n  ) => React.ReactNode;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\nexport interface SwipeableMethods {\n  close: () => void;\n  openLeft: () => void;\n  openRight: () => void;\n  reset: () => void;\n}\n\nconst Swipeable = forwardRef<SwipeableMethods, SwipeableProps>(\n  function Swipeable(\n    props: SwipeableProps,\n    ref: ForwardedRef<SwipeableMethods>\n  ) {\n    const defaultProps = {\n      friction: 1,\n      overshootFriction: 1,\n      dragOffset: 10,\n      enableTrackpadTwoFingerGesture: false,\n    };\n\n    const {\n      leftThreshold,\n      rightThreshold,\n      enabled,\n      containerStyle,\n      childrenContainerStyle,\n      animationOptions,\n      overshootLeft,\n      overshootRight,\n      testID,\n      children,\n      enableTrackpadTwoFingerGesture = defaultProps.enableTrackpadTwoFingerGesture,\n      dragOffsetFromLeftEdge = defaultProps.dragOffset,\n      dragOffsetFromRightEdge = defaultProps.dragOffset,\n      friction = defaultProps.friction,\n      overshootFriction = defaultProps.overshootFriction,\n      onSwipeableOpenStartDrag,\n      onSwipeableCloseStartDrag,\n      onSwipeableWillOpen,\n      onSwipeableWillClose,\n      onSwipeableOpen,\n      onSwipeableClose,\n      renderLeftActions,\n      renderRightActions,\n      ...remainingProps\n    } = props;\n\n    const rowState = useSharedValue<number>(0);\n\n    const userDrag = useSharedValue<number>(0);\n\n    const appliedTranslation = useSharedValue<number>(0);\n\n    const rowWidth = useSharedValue<number>(0);\n    const leftWidth = useSharedValue<number>(0);\n    const rightWidth = useSharedValue<number>(0);\n\n    // used for synchronizing layout measurements between JS and UI\n    const rightOffset = useSharedValue<number | null>(null);\n\n    const showLeftProgress = useSharedValue<number>(0);\n    const showRightProgress = useSharedValue<number>(0);\n\n    const updateRightElementWidth = useCallback(() => {\n      'worklet';\n      if (rightOffset.value === null) {\n        rightOffset.value = rowWidth.value;\n      }\n      rightWidth.value = Math.max(0, rowWidth.value - rightOffset.value);\n    }, [rightOffset, rightWidth, rowWidth]);\n\n    const updateAnimatedEvent = useCallback(() => {\n      'worklet';\n\n      const shouldOvershootLeft = overshootLeft ?? leftWidth.value > 0;\n      const shouldOvershootRight = overshootRight ?? rightWidth.value > 0;\n\n      const startOffset =\n        rowState.value === 1\n          ? leftWidth.value\n          : rowState.value === -1\n          ? -rightWidth.value\n          : 0;\n\n      const offsetDrag = userDrag.value / friction + startOffset;\n\n      appliedTranslation.value = interpolate(\n        offsetDrag,\n        [\n          -rightWidth.value - 1,\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + 1,\n        ],\n        [\n          -rightWidth.value -\n            (shouldOvershootRight ? 1 / overshootFriction : 0),\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + (shouldOvershootLeft ? 1 / overshootFriction : 0),\n        ]\n      );\n\n      showLeftProgress.value =\n        leftWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-1, 0, leftWidth.value],\n              [0, 0, 1]\n            )\n          : 0;\n\n      showRightProgress.value =\n        rightWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-rightWidth.value, 0, 1],\n              [1, 0, 0]\n            )\n          : 0;\n    }, [\n      appliedTranslation,\n      friction,\n      leftWidth,\n      overshootFriction,\n      rightWidth,\n      rowState,\n      showLeftProgress,\n      showRightProgress,\n      userDrag,\n      overshootLeft,\n      overshootRight,\n    ]);\n\n    const dispatchImmediateEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        'worklet';\n        if (toValue > 0 && onSwipeableWillOpen) {\n          runOnJS(onSwipeableWillOpen)(SwipeDirection.RIGHT);\n        } else if (toValue < 0 && onSwipeableWillOpen) {\n          runOnJS(onSwipeableWillOpen)(SwipeDirection.LEFT);\n        } else if (onSwipeableWillClose) {\n          runOnJS(onSwipeableWillClose)(\n            fromValue > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT\n          );\n        }\n      },\n      [onSwipeableWillClose, onSwipeableWillOpen]\n    );\n\n    const dispatchEndEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        'worklet';\n        if (toValue > 0 && onSwipeableOpen) {\n          runOnJS(onSwipeableOpen)(SwipeDirection.RIGHT);\n        } else if (toValue < 0 && onSwipeableOpen) {\n          runOnJS(onSwipeableOpen)(SwipeDirection.LEFT);\n        } else if (onSwipeableClose) {\n          runOnJS(onSwipeableClose)(\n            fromValue > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT\n          );\n        }\n      },\n      [onSwipeableClose, onSwipeableOpen]\n    );\n\n    const animateRow: (toValue: number, velocityX?: number) => void =\n      useCallback(\n        (toValue: number, velocityX?: number) => {\n          'worklet';\n\n          const translationSpringConfig = {\n            duration: 1000,\n            dampingRatio: 0.9,\n            stiffness: 500,\n            velocity: velocityX,\n            overshootClamping: true,\n            ...animationOptions,\n          };\n\n          const isClosing = toValue === 0;\n          const moveToRight = isClosing ? rowState.value < 0 : toValue > 0;\n\n          const usedWidth = isClosing\n            ? moveToRight\n              ? rightWidth.value\n              : leftWidth.value\n            : moveToRight\n            ? leftWidth.value\n            : rightWidth.value;\n\n          const progressSpringConfig = {\n            ...translationSpringConfig,\n            restDisplacementThreshold: 0.01,\n            restSpeedThreshold: 0.01,\n            velocity:\n              velocityX &&\n              interpolate(velocityX, [-usedWidth, usedWidth], [-1, 1]),\n          };\n\n          const frozenRowState = rowState.value;\n\n          appliedTranslation.value = withSpring(\n            toValue,\n            translationSpringConfig,\n            (isFinished) => {\n              if (isFinished) {\n                dispatchEndEvents(frozenRowState, toValue);\n              }\n            }\n          );\n\n          const progressTarget = toValue === 0 ? 0 : 1;\n\n          showLeftProgress.value =\n            leftWidth.value > 0\n              ? withSpring(progressTarget, progressSpringConfig)\n              : 0;\n          showRightProgress.value =\n            rightWidth.value > 0\n              ? withSpring(progressTarget, progressSpringConfig)\n              : 0;\n\n          dispatchImmediateEvents(frozenRowState, toValue);\n\n          rowState.value = Math.sign(toValue);\n        },\n        [\n          rowState,\n          animationOptions,\n          appliedTranslation,\n          showLeftProgress,\n          leftWidth,\n          showRightProgress,\n          rightWidth,\n          dispatchImmediateEvents,\n          dispatchEndEvents,\n        ]\n      );\n\n    const swipeableMethods = useMemo<SwipeableMethods>(\n      () => ({\n        close() {\n          'worklet';\n          animateRow(0);\n        },\n        openLeft() {\n          'worklet';\n          animateRow(leftWidth.value);\n        },\n        openRight() {\n          'worklet';\n          // rightOffset and rowWidth are already much sooner than rightWidth\n          animateRow((rightOffset.value ?? 0) - rowWidth.value);\n        },\n        reset() {\n          'worklet';\n          userDrag.value = 0;\n          showLeftProgress.value = 0;\n          appliedTranslation.value = 0;\n          rowState.value = 0;\n        },\n      }),\n      [\n        leftWidth,\n        rightOffset,\n        rowWidth,\n        userDrag,\n        showLeftProgress,\n        appliedTranslation,\n        rowState,\n        animateRow,\n      ]\n    );\n\n    const onRowLayout = useCallback(\n      ({ nativeEvent }: LayoutChangeEvent) => {\n        rowWidth.value = nativeEvent.layout.width;\n      },\n      [rowWidth]\n    );\n\n    const leftElement = useCallback(\n      () => (\n        <Animated.View style={[styles.leftActions]}>\n          {renderLeftActions?.(\n            showLeftProgress,\n            appliedTranslation,\n            swipeableMethods\n          )}\n          <View\n            onLayout={({ nativeEvent }) =>\n              (leftWidth.value = nativeEvent.layout.x)\n            }\n          />\n        </Animated.View>\n      ),\n      [\n        appliedTranslation,\n        leftWidth,\n        renderLeftActions,\n        showLeftProgress,\n        swipeableMethods,\n      ]\n    );\n\n    const rightElement = useCallback(\n      () => (\n        <Animated.View style={[styles.rightActions]}>\n          {renderRightActions?.(\n            showRightProgress,\n            appliedTranslation,\n            swipeableMethods\n          )}\n          <View\n            onLayout={({ nativeEvent }) => {\n              rightOffset.value = nativeEvent.layout.x;\n            }}\n          />\n        </Animated.View>\n      ),\n      [\n        appliedTranslation,\n        renderRightActions,\n        rightOffset,\n        showRightProgress,\n        swipeableMethods,\n      ]\n    );\n\n    const handleRelease = useCallback(\n      (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n        'worklet';\n        const { velocityX } = event;\n        userDrag.value = event.translationX;\n\n        updateRightElementWidth();\n\n        const leftThresholdProp = leftThreshold ?? leftWidth.value / 2;\n        const rightThresholdProp = rightThreshold ?? rightWidth.value / 2;\n\n        const translationX =\n          (userDrag.value + DRAG_TOSS * velocityX) / friction;\n\n        let toValue = 0;\n\n        if (rowState.value === 0) {\n          if (translationX > leftThresholdProp) {\n            toValue = leftWidth.value;\n          } else if (translationX < -rightThresholdProp) {\n            toValue = -rightWidth.value;\n          }\n        } else if (rowState.value === 1) {\n          // Swiped to left\n          if (translationX > -leftThresholdProp) {\n            toValue = leftWidth.value;\n          }\n        } else {\n          // Swiped to right\n          if (translationX < rightThresholdProp) {\n            toValue = -rightWidth.value;\n          }\n        }\n\n        animateRow(toValue, velocityX / friction);\n      },\n      [\n        animateRow,\n        friction,\n        leftThreshold,\n        leftWidth,\n        rightThreshold,\n        rightWidth,\n        rowState,\n        userDrag,\n        updateRightElementWidth,\n      ]\n    );\n\n    const close = useCallback(() => {\n      'worklet';\n      animateRow(0);\n    }, [animateRow]);\n\n    const dragStarted = useSharedValue<boolean>(false);\n\n    const tapGesture = useMemo(\n      () =>\n        Gesture.Tap()\n          .shouldCancelWhenOutside(true)\n          .onStart(() => {\n            if (rowState.value !== 0) {\n              close();\n            }\n          }),\n      [close, rowState]\n    );\n\n    const panGesture = useMemo(\n      () =>\n        Gesture.Pan()\n          .enabled(enabled !== false)\n          .enableTrackpadTwoFingerGesture(enableTrackpadTwoFingerGesture)\n          .activeOffsetX([-dragOffsetFromRightEdge, dragOffsetFromLeftEdge])\n          .onStart(() => {\n            updateRightElementWidth();\n          })\n          .onUpdate(\n            (event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => {\n              userDrag.value = event.translationX;\n\n              const direction =\n                rowState.value === -1\n                  ? SwipeDirection.RIGHT\n                  : rowState.value === 1\n                  ? SwipeDirection.LEFT\n                  : event.translationX > 0\n                  ? SwipeDirection.RIGHT\n                  : SwipeDirection.LEFT;\n\n              if (!dragStarted.value) {\n                dragStarted.value = true;\n                if (rowState.value === 0 && onSwipeableOpenStartDrag) {\n                  runOnJS(onSwipeableOpenStartDrag)(direction);\n                } else if (onSwipeableCloseStartDrag) {\n                  runOnJS(onSwipeableCloseStartDrag)(direction);\n                }\n              }\n\n              updateAnimatedEvent();\n            }\n          )\n          .onEnd(\n            (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n              handleRelease(event);\n            }\n          )\n          .onFinalize(() => {\n            dragStarted.value = false;\n          }),\n      [\n        dragOffsetFromLeftEdge,\n        dragOffsetFromRightEdge,\n        dragStarted,\n        enableTrackpadTwoFingerGesture,\n        enabled,\n        handleRelease,\n        onSwipeableCloseStartDrag,\n        onSwipeableOpenStartDrag,\n        rowState,\n        updateAnimatedEvent,\n        updateRightElementWidth,\n        userDrag,\n      ]\n    );\n\n    useImperativeHandle(ref, () => swipeableMethods, [swipeableMethods]);\n\n    const animatedStyle = useAnimatedStyle(\n      () => ({\n        transform: [{ translateX: appliedTranslation.value }],\n        pointerEvents: rowState.value === 0 ? 'auto' : 'box-only',\n      }),\n      [appliedTranslation, rowState]\n    );\n\n    const swipeableComponent = (\n      <GestureDetector gesture={panGesture} touchAction=\"pan-y\">\n        <Animated.View\n          {...remainingProps}\n          onLayout={onRowLayout}\n          style={[styles.container, containerStyle]}>\n          {leftElement()}\n          {rightElement()}\n          <GestureDetector gesture={tapGesture} touchAction=\"pan-y\">\n            <Animated.View style={[animatedStyle, childrenContainerStyle]}>\n              {children}\n            </Animated.View>\n          </GestureDetector>\n        </Animated.View>\n      </GestureDetector>\n    );\n\n    return testID ? (\n      <View testID={testID}>{swipeableComponent}</View>\n    ) : (\n      swipeableComponent\n    );\n  }\n);\n\nexport default Swipeable;\nexport type SwipeableRef = ForwardedRef<SwipeableMethods>;\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]}