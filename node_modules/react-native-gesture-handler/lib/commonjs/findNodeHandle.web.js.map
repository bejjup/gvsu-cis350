{"version":3,"sources":["findNodeHandle.web.ts"],"names":["findNodeHandle","viewRef","viewTag","undefined","Element","style","display","firstChild","elementRef","current","element"],"mappings":";;;;;;;AACA;;AAEe,SAASA,cAAT,CACbC,OADa,EAEsB;AACnC;AACA;AACA;AACA,MAAI,CAACA,OAAD,aAACA,OAAD,uBAACA,OAAD,CAAgCC,OAAhC,MAA4CC,SAAhD,EAA2D;AACzD,WAAOH,cAAc,CAAEC,OAAD,CAA+BC,OAAhC,CAArB;AACD;;AAED,MAAID,OAAO,YAAYG,OAAvB,EAAgC;AAC9B,QAAIH,OAAO,CAACI,KAAR,CAAcC,OAAd,KAA0B,UAA9B,EAA0C;AACxC,aAAON,cAAc,CAACC,OAAO,CAACM,UAAT,CAArB;AACD;;AAED,WAAON,OAAP;AACD;;AAED,MAAI,2BAAeA,OAAf,CAAJ,EAA6B;AAC3B,WAAQA,OAAD,CAAoBO,UAApB,CAA+BC,OAAtC;AACD,GAlBkC,CAoBnC;AACA;;;AACA,MAAIC,OAAO,GAAIT,OAAJ,aAAIA,OAAJ,uBAAIA,OAAD,CAAgCQ,OAA9C;;AAEA,SAAOC,OAAO,IAAIA,OAAO,CAACL,KAAR,CAAcC,OAAd,KAA0B,UAA5C,EAAwD;AACtDI,IAAAA,OAAO,GAAGA,OAAO,CAACH,UAAlB;AACD;;AAED,SAAOG,OAAP;AACD","sourcesContent":["import type { GestureHandlerRef, SVGRef } from './web/interfaces';\nimport { isRNSVGElement } from './web/utils';\n\nexport default function findNodeHandle(\n  viewRef: GestureHandlerRef | SVGRef | HTMLElement | SVGElement\n): HTMLElement | SVGElement | number {\n  // Old API assumes that child handler is HTMLElement.\n  // However, if we nest handlers, we will get ref to another handler.\n  // In that case, we want to recursively call findNodeHandle with new handler viewTag (which can also be ref to another handler).\n  if ((viewRef as GestureHandlerRef)?.viewTag !== undefined) {\n    return findNodeHandle((viewRef as GestureHandlerRef).viewTag);\n  }\n\n  if (viewRef instanceof Element) {\n    if (viewRef.style.display === 'contents') {\n      return findNodeHandle(viewRef.firstChild as HTMLElement);\n    }\n\n    return viewRef;\n  }\n\n  if (isRNSVGElement(viewRef)) {\n    return (viewRef as SVGRef).elementRef.current;\n  }\n\n  // In new API, we receive ref object which `current` field points to  wrapper `div` with `display: contents;`.\n  // We want to return the first descendant (in DFS order) that doesn't have this property.\n  let element = (viewRef as GestureHandlerRef)?.current;\n\n  while (element && element.style.display === 'contents') {\n    element = element.firstChild as HTMLElement;\n  }\n\n  return element;\n}\n"]}