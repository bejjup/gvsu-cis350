{"version":3,"sources":["../../../../src/install/utils/checkPackagesCompatibility.ts"],"sourcesContent":["// note(Simek): https://github.com/react-native-community/directory/blob/main/pages/api/libraries/check.ts\nimport chalk from 'chalk';\n\nimport { Log } from '../../log';\nimport { fetch } from '../../utils/fetch';\nimport { learnMore } from '../../utils/link';\n\nexport type ReactNativeDirectoryCheckResult = {\n  unmaintained: boolean;\n  newArchitecture: 'supported' | 'unsupported' | 'untested';\n};\n\nconst ERROR_MESSAGE =\n  'Unable to fetch compatibility data from React Native Directory. Skipping check.';\n\nexport async function checkPackagesCompatibility(packages: string[]) {\n  try {\n    const response = await fetch('https://reactnative.directory/api/libraries/check', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ packages }),\n    });\n\n    if (!response.ok) {\n      Log.log(chalk.gray(ERROR_MESSAGE));\n    }\n\n    const packageMetadata = (await response.json()) as Record<\n      string,\n      ReactNativeDirectoryCheckResult\n    >;\n\n    const incompatiblePackages = packages.filter(\n      (packageName) => packageMetadata[packageName]?.newArchitecture === 'unsupported'\n    );\n\n    if (incompatiblePackages.length) {\n      Log.warn(\n        chalk.yellow(\n          `${chalk.bold('Warning')}: ${formatPackageNames(incompatiblePackages)} do${incompatiblePackages.length > 1 ? '' : 'es'} not support the New Architecture. ${learnMore('https://docs.expo.dev/guides/new-architecture/')}`\n        )\n      );\n    }\n  } catch {\n    Log.log(chalk.gray(ERROR_MESSAGE));\n  }\n}\n\nfunction formatPackageNames(incompatiblePackages: string[]) {\n  if (incompatiblePackages.length === 1) {\n    return incompatiblePackages.join();\n  }\n\n  const lastPackage = incompatiblePackages.pop();\n  return `${incompatiblePackages.join(', ')} and ${lastPackage}`;\n}\n"],"names":["checkPackagesCompatibility","ERROR_MESSAGE","packages","response","fetch","method","headers","body","JSON","stringify","ok","Log","log","chalk","gray","packageMetadata","json","incompatiblePackages","filter","packageName","newArchitecture","length","warn","yellow","bold","formatPackageNames","learnMore","join","lastPackage","pop"],"mappings":"AAAA,0GAA0G;AAC1G;;;;+BAcsBA,4BAA0B;;aAA1BA,0BAA0B;;;8DAd9B,OAAO;;;;;;qBAEL,WAAW;uBACT,mBAAmB;sBACf,kBAAkB;;;;;;AAO5C,MAAMC,aAAa,GACjB,iFAAiF,AAAC;AAE7E,eAAeD,0BAA0B,CAACE,QAAkB,EAAE;IACnE,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,IAAAA,MAAK,MAAA,EAAC,mDAAmD,EAAE;YAChFC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAEP,QAAQ;aAAE,CAAC;SACnC,CAAC,AAAC;QAEH,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;YAChBC,IAAG,IAAA,CAACC,GAAG,CAACC,MAAK,EAAA,QAAA,CAACC,IAAI,CAACb,aAAa,CAAC,CAAC,CAAC;QACrC,CAAC;QAED,MAAMc,eAAe,GAAI,MAAMZ,QAAQ,CAACa,IAAI,EAAE,AAG7C,AAAC;QAEF,MAAMC,oBAAoB,GAAGf,QAAQ,CAACgB,MAAM,CAC1C,CAACC,WAAW;gBAAKJ,GAA4B;YAA5BA,OAAAA,CAAAA,CAAAA,GAA4B,GAA5BA,eAAe,CAACI,WAAW,CAAC,SAAiB,GAA7CJ,KAAAA,CAA6C,GAA7CA,GAA4B,CAAEK,eAAe,CAAA,KAAK,aAAa,CAAA;SAAA,CACjF,AAAC;QAEF,IAAIH,oBAAoB,CAACI,MAAM,EAAE;YAC/BV,IAAG,IAAA,CAACW,IAAI,CACNT,MAAK,EAAA,QAAA,CAACU,MAAM,CACV,CAAC,EAAEV,MAAK,EAAA,QAAA,CAACW,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAEC,kBAAkB,CAACR,oBAAoB,CAAC,CAAC,GAAG,EAAEA,oBAAoB,CAACI,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,mCAAmC,EAAEK,IAAAA,KAAS,UAAA,EAAC,gDAAgD,CAAC,CAAC,CAAC,CAC1N,CACF,CAAC;QACJ,CAAC;IACH,EAAE,OAAM;QACNf,IAAG,IAAA,CAACC,GAAG,CAACC,MAAK,EAAA,QAAA,CAACC,IAAI,CAACb,aAAa,CAAC,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAED,SAASwB,kBAAkB,CAACR,oBAA8B,EAAE;IAC1D,IAAIA,oBAAoB,CAACI,MAAM,KAAK,CAAC,EAAE;QACrC,OAAOJ,oBAAoB,CAACU,IAAI,EAAE,CAAC;IACrC,CAAC;IAED,MAAMC,WAAW,GAAGX,oBAAoB,CAACY,GAAG,EAAE,AAAC;IAC/C,OAAO,CAAC,EAAEZ,oBAAoB,CAACU,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAEC,WAAW,CAAC,CAAC,CAAC;AACjE,CAAC"}