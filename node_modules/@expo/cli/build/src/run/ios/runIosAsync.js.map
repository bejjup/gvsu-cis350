{"version":3,"sources":["../../../../src/run/ios/runIosAsync.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../log';\nimport { maybePromptToSyncPodsAsync } from '../../utils/cocoapods';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { ensurePortAvailabilityAsync } from '../../utils/port';\nimport { profile } from '../../utils/profile';\nimport { getSchemesForIosAsync } from '../../utils/scheme';\nimport { ensureNativeProjectAsync } from '../ensureNativeProject';\nimport { logProjectLogsLocation } from '../hints';\nimport { startBundlerAsync } from '../startBundler';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options } from './XcodeBuild.types';\nimport { getLaunchInfoForBinaryAsync, launchAppAsync } from './launchApp';\nimport { resolveOptionsAsync } from './options/resolveOptions';\nimport { getValidBinaryPathAsync } from './validateExternalBinary';\nimport { exportEagerAsync } from '../../export/embed/exportEager';\n\nconst debug = require('debug')('expo:run:ios');\n\nexport async function runIosAsync(projectRoot: string, options: Options) {\n  setNodeEnv(options.configuration === 'Release' ? 'production' : 'development');\n  require('@expo/env').load(projectRoot);\n\n  assertPlatform();\n\n  const install = !!options.install;\n\n  if ((await ensureNativeProjectAsync(projectRoot, { platform: 'ios', install })) && install) {\n    await maybePromptToSyncPodsAsync(projectRoot);\n  }\n\n  // Resolve the CLI arguments into useable options.\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  let binaryPath: string;\n  if (options.binary) {\n    binaryPath = await getValidBinaryPathAsync(options.binary, props);\n    Log.log('Using custom binary path:', binaryPath);\n  } else {\n    let eagerBundleOptions: string | undefined;\n\n    if (options.configuration === 'Release') {\n      eagerBundleOptions = JSON.stringify(\n        await exportEagerAsync(projectRoot, {\n          dev: false,\n          platform: 'ios',\n        })\n      );\n    }\n\n    // Spawn the `xcodebuild` process to create the app binary.\n    const buildOutput = await XcodeBuild.buildAsync({\n      ...props,\n      eagerBundleOptions,\n    });\n\n    // Find the path to the built app binary, this will be used to install the binary\n    // on a device.\n    binaryPath = await profile(XcodeBuild.getAppBinaryPath)(buildOutput);\n  }\n  debug('Binary path:', binaryPath);\n\n  // Ensure the port hasn't become busy during the build.\n  if (props.shouldStartBundler && !(await ensurePortAvailabilityAsync(projectRoot, props))) {\n    props.shouldStartBundler = false;\n  }\n\n  const launchInfo = await getLaunchInfoForBinaryAsync(binaryPath);\n  const isCustomBinary = !!options.binary;\n\n  // Start the dev server which creates all of the required info for\n  // launching the app on a simulator.\n  const manager = await startBundlerAsync(projectRoot, {\n    port: props.port,\n    headless: !props.shouldStartBundler,\n    // If a scheme is specified then use that instead of the package name.\n\n    scheme: isCustomBinary\n      ? // If launching a custom binary, use the schemes in the Info.plist.\n        launchInfo.schemes[0]\n      : // If a scheme is specified then use that instead of the package name.\n        (await getSchemesForIosAsync(projectRoot))?.[0],\n  });\n\n  // Install and launch the app binary on a device.\n  await launchAppAsync(\n    binaryPath,\n    manager,\n    {\n      isSimulator: props.isSimulator,\n      device: props.device,\n      shouldStartBundler: props.shouldStartBundler,\n    },\n    launchInfo.bundleId\n  );\n\n  // Log the location of the JS logs for the device.\n  if (props.shouldStartBundler) {\n    logProjectLogsLocation();\n  } else {\n    await manager.stopAsync();\n  }\n}\n\nfunction assertPlatform() {\n  if (process.platform !== 'darwin') {\n    Log.exit(\n      chalk`iOS apps can only be built on macOS devices. Use {cyan eas build -p ios} to build in the cloud.`\n    );\n  }\n}\n"],"names":["runIosAsync","debug","require","projectRoot","options","setNodeEnv","configuration","load","assertPlatform","install","ensureNativeProjectAsync","platform","maybePromptToSyncPodsAsync","props","resolveOptionsAsync","binaryPath","binary","getValidBinaryPathAsync","Log","log","eagerBundleOptions","JSON","stringify","exportEagerAsync","dev","buildOutput","XcodeBuild","buildAsync","profile","getAppBinaryPath","shouldStartBundler","ensurePortAvailabilityAsync","launchInfo","getLaunchInfoForBinaryAsync","isCustomBinary","manager","startBundlerAsync","port","headless","scheme","schemes","getSchemesForIosAsync","launchAppAsync","isSimulator","device","bundleId","logProjectLogsLocation","stopAsync","process","exit","chalk"],"mappings":"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"}