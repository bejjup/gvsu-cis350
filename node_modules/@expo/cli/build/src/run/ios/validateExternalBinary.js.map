{"version":3,"sources":["../../../../src/run/ios/validateExternalBinary.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport fs from 'fs';\nimport { glob as globAsync } from 'glob';\nimport path from 'path';\n\nimport { createTempDirectoryPath } from '../../utils/createTempPath';\nimport { CommandError } from '../../utils/errors';\nimport { parsePlistAsync } from '../../utils/plist';\n\nconst debug = require('debug')('expo:run:ios:binary');\n\nexport async function getValidBinaryPathAsync(input: string, props: { isSimulator: boolean }) {\n  const resolved = path.resolve(input);\n\n  if (!fs.existsSync(resolved)) {\n    throw new CommandError(`The path to the iOS binary does not exist: ${resolved}`);\n  }\n\n  // If the file is an ipa then move it to a temp directory and extract the app binary.\n  if (resolved.endsWith('.ipa')) {\n    const outputPath = createTempDirectoryPath();\n    debug('Extracting IPA:', resolved, outputPath);\n    const appDir = await extractIpaAsync(resolved, outputPath);\n\n    if (props.isSimulator) {\n      assertProvisionedForSimulator(appDir);\n    } else {\n      // TODO: Assert provisioned for devices in the future (this is difficult).\n    }\n    return appDir;\n  }\n  return resolved;\n}\n\nasync function extractIpaAsync(ipaPath: string, outputPath: string): Promise<string> {\n  // Create the output directory if it does not exist\n  if (!fs.existsSync(outputPath)) {\n    fs.mkdirSync(outputPath, { recursive: true });\n  }\n\n  // Use the unzip command to extract the IPA file\n  try {\n    await spawnAsync('unzip', ['-o', ipaPath, '-d', outputPath]);\n  } catch (error: any) {\n    throw new Error(`Error extracting IPA: ${error.message}`);\n  }\n\n  const appBinPaths = await globAsync('Payload/*.app', {\n    cwd: outputPath,\n    absolute: true,\n    maxDepth: 2,\n  });\n\n  if (appBinPaths.length === 0) {\n    throw new Error('No .app directory found in the IPA');\n  }\n\n  return appBinPaths[0];\n}\n\nasync function assertProvisionedForSimulator(appPath: string) {\n  const provisionPath = path.join(appPath, 'embedded.mobileprovision');\n\n  if (!fs.existsSync(provisionPath)) {\n    // This can often result in false positives.\n    debug('No embedded.mobileprovision file found. Likely provisioned for simulator.');\n    return;\n  }\n\n  const provisionData = fs.readFileSync(provisionPath, 'utf8');\n  const start = provisionData.indexOf('<?xml');\n  const end = provisionData.indexOf('</plist>') + 8;\n  const plistData = provisionData.substring(start, end);\n  const parsedData = await parsePlistAsync(plistData);\n\n  const platforms = parsedData['ProvisionsAllDevices'];\n  if (platforms) {\n    throw new CommandError(\n      'The app binary is provisioned for devices, and cannot be run on simulators.'\n    );\n  }\n}\n"],"names":["getValidBinaryPathAsync","debug","require","input","props","resolved","path","resolve","fs","existsSync","CommandError","endsWith","outputPath","createTempDirectoryPath","appDir","extractIpaAsync","isSimulator","assertProvisionedForSimulator","ipaPath","mkdirSync","recursive","spawnAsync","error","Error","message","appBinPaths","globAsync","cwd","absolute","maxDepth","length","appPath","provisionPath","join","provisionData","readFileSync","start","indexOf","end","plistData","substring","parsedData","parsePlistAsync","platforms"],"mappings":"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"}