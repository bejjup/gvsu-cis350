{"version":3,"sources":["../../../../src/api/rest/client.ts"],"sourcesContent":["import { getExpoHomeDirectory } from '@expo/config/build/getUserState';\nimport type { JSONValue } from '@expo/json-file';\nimport path from 'path';\n\nimport { wrapFetchWithCache } from './cache/wrapFetchWithCache';\nimport type { FetchLike } from './client.types';\nimport { wrapFetchWithBaseUrl } from './wrapFetchWithBaseUrl';\nimport { wrapFetchWithOffline } from './wrapFetchWithOffline';\nimport { wrapFetchWithProgress } from './wrapFetchWithProgress';\nimport { wrapFetchWithProxy } from './wrapFetchWithProxy';\nimport { env } from '../../utils/env';\nimport { CommandError } from '../../utils/errors';\nimport { fetch } from '../../utils/fetch';\nimport { getExpoApiBaseUrl } from '../endpoint';\nimport { disableNetwork } from '../settings';\nimport { getAccessToken, getSession } from '../user/UserSettings';\n\nexport class ApiV2Error extends Error {\n  readonly name = 'ApiV2Error';\n  readonly code: string;\n  readonly expoApiV2ErrorCode: string;\n  readonly expoApiV2ErrorDetails?: JSONValue;\n  readonly expoApiV2ErrorServerStack?: string;\n  readonly expoApiV2ErrorMetadata?: object;\n\n  constructor(response: {\n    message: string;\n    code: string;\n    stack?: string;\n    details?: JSONValue;\n    metadata?: object;\n  }) {\n    super(response.message);\n    this.code = response.code;\n    this.expoApiV2ErrorCode = response.code;\n    this.expoApiV2ErrorDetails = response.details;\n    this.expoApiV2ErrorServerStack = response.stack;\n    this.expoApiV2ErrorMetadata = response.metadata;\n  }\n}\n\n/**\n * An Expo server error that didn't return the expected error JSON information.\n * The only 'expected' place for this is in testing, all other cases are bugs with the server.\n */\nexport class UnexpectedServerError extends Error {\n  readonly name = 'UnexpectedServerError';\n}\n\n/**\n * An error defining that the server didn't return the expected error JSON information.\n * The only 'expected' place for this is in testing, all other cases are bugs with the client.\n */\nexport class UnexpectedServerData extends Error {\n  readonly name = 'UnexpectedServerData';\n}\n\n/** Validate the response json contains `.data` property, or throw an unexpected server data error */\nexport function getResponseDataOrThrow<T = any>(json: unknown): T {\n  if (!!json && typeof json === 'object' && 'data' in json) {\n    return json.data as T;\n  }\n\n  throw new UnexpectedServerData(\n    !!json && typeof json === 'object' ? JSON.stringify(json) : 'Unknown data received from server.'\n  );\n}\n\n/**\n * @returns a `fetch` function that will inject user authentication information and handle errors from the Expo API.\n */\nexport function wrapFetchWithCredentials(fetchFunction: FetchLike): FetchLike {\n  return async function fetchWithCredentials(url, options = {}) {\n    if (Array.isArray(options.headers)) {\n      throw new Error('request headers must be in object form');\n    }\n\n    const resolvedHeaders = options.headers ?? ({} as any);\n\n    const token = getAccessToken();\n    if (token) {\n      resolvedHeaders.authorization = `Bearer ${token}`;\n    } else {\n      const sessionSecret = getSession()?.sessionSecret;\n      if (sessionSecret) {\n        resolvedHeaders['expo-session'] = sessionSecret;\n      }\n    }\n\n    try {\n      const response = await fetchFunction(url, {\n        ...options,\n        headers: resolvedHeaders,\n      });\n\n      // Handle expected API errors (4xx)\n      if (response.status >= 400 && response.status < 500) {\n        const body = await response.text();\n        try {\n          const data = JSON.parse(body);\n          if (data?.errors?.length) {\n            throw new ApiV2Error(data.errors[0]);\n          }\n        } catch (error: any) {\n          // Server returned non-json response.\n          if (error.message.includes('in JSON at position')) {\n            throw new UnexpectedServerError(body);\n          }\n          throw error;\n        }\n      }\n\n      return response;\n    } catch (error: any) {\n      // When running `expo start`, but wifi or internet has issues\n      if (\n        isNetworkError(error) || // node-fetch error handling\n        ('cause' in error && isNetworkError(error.cause)) // undici error handling\n      ) {\n        disableNetwork();\n\n        throw new CommandError(\n          'OFFLINE',\n          'Network connection is unreliable. Try again with the environment variable `EXPO_OFFLINE=1` to skip network requests.'\n        );\n      }\n\n      throw error;\n    }\n  };\n}\n\n/**\n * Determine if the provided error is related to a network issue.\n * When this returns true, offline mode should be enabled.\n *   - `ENOTFOUND` is thrown when the DNS lookup failed\n *   - `UND_ERR_CONNECT_TIMEOUT` is thrown after DNS is resolved, but server can't be reached\n *\n * @see https://nodejs.org/api/errors.html\n * @see https://github.com/nodejs/undici#network-address-family-autoselection\n */\nfunction isNetworkError(error: Error & { code?: string }) {\n  return (\n    'code' in error && error.code && ['ENOTFOUND', 'UND_ERR_CONNECT_TIMEOUT'].includes(error.code)\n  );\n}\n\nconst fetchWithOffline = wrapFetchWithOffline(fetch);\n\nconst fetchWithBaseUrl = wrapFetchWithBaseUrl(fetchWithOffline, getExpoApiBaseUrl() + '/v2/');\n\nconst fetchWithProxy = wrapFetchWithProxy(fetchWithBaseUrl);\n\nconst fetchWithCredentials = wrapFetchWithProgress(wrapFetchWithCredentials(fetchWithProxy));\n\n/**\n * Create an instance of the fully qualified fetch command (auto authentication and api) but with caching in the '~/.expo' directory.\n * Caching is disabled automatically if the EXPO_NO_CACHE or EXPO_BETA environment variables are enabled.\n */\nexport function createCachedFetch({\n  fetch = fetchWithCredentials,\n  cacheDirectory,\n  ttl,\n  skipCache,\n}: {\n  fetch?: FetchLike;\n  cacheDirectory: string;\n  ttl?: number;\n  skipCache?: boolean;\n}): FetchLike {\n  // Disable all caching in EXPO_BETA.\n  if (skipCache || env.EXPO_BETA || env.EXPO_NO_CACHE) {\n    return fetch;\n  }\n\n  const { FileSystemResponseCache } =\n    require('./cache/FileSystemResponseCache') as typeof import('./cache/FileSystemResponseCache');\n\n  return wrapFetchWithCache(\n    fetch,\n    new FileSystemResponseCache({\n      cacheDirectory: path.join(getExpoHomeDirectory(), cacheDirectory),\n      ttl,\n    })\n  );\n}\n\n/** Instance of fetch with automatic base URL pointing to the Expo API, user credential injection, and API error handling. Caching not included.  */\nexport const fetchAsync = wrapFetchWithProgress(wrapFetchWithCredentials(fetchWithProxy));\n"],"names":["ApiV2Error","UnexpectedServerError","UnexpectedServerData","getResponseDataOrThrow","wrapFetchWithCredentials","createCachedFetch","fetchAsync","Error","name","constructor","response","message","code","expoApiV2ErrorCode","expoApiV2ErrorDetails","details","expoApiV2ErrorServerStack","stack","expoApiV2ErrorMetadata","metadata","json","data","JSON","stringify","fetchFunction","fetchWithCredentials","url","options","Array","isArray","headers","resolvedHeaders","token","getAccessToken","authorization","getSession","sessionSecret","status","body","text","parse","errors","length","error","includes","isNetworkError","cause","disableNetwork","CommandError","fetchWithOffline","wrapFetchWithOffline","fetch","fetchWithBaseUrl","wrapFetchWithBaseUrl","getExpoApiBaseUrl","fetchWithProxy","wrapFetchWithProxy","wrapFetchWithProgress","cacheDirectory","ttl","skipCache","env","EXPO_BETA","EXPO_NO_CACHE","FileSystemResponseCache","require","wrapFetchWithCache","path","join","getExpoHomeDirectory"],"mappings":"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"}