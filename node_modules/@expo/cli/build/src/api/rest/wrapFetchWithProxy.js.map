{"version":3,"sources":["../../../../src/api/rest/wrapFetchWithProxy.ts"],"sourcesContent":["import { EnvHttpProxyAgent } from 'undici';\n\nimport { FetchLike } from './client.types';\nimport { env } from '../../utils/env';\n\nconst debug = require('debug')('expo:api:fetch:proxy') as typeof console.log;\n\n/** Wrap fetch with support for proxies. */\nexport function wrapFetchWithProxy(fetchFunction: FetchLike): FetchLike {\n  // NOTE(EvanBacon): DO NOT RETURN AN ASYNC WRAPPER. THIS BREAKS LOADING INDICATORS.\n  return function fetchWithProxy(url, options = {}) {\n    if (!options.dispatcher && env.HTTP_PROXY) {\n      debug('Using proxy:', env.HTTP_PROXY);\n      options.dispatcher = new EnvHttpProxyAgent();\n    }\n\n    return fetchFunction(url, options);\n  };\n}\n"],"names":["wrapFetchWithProxy","debug","require","fetchFunction","fetchWithProxy","url","options","dispatcher","env","HTTP_PROXY","EnvHttpProxyAgent"],"mappings":"AAAA;;;;+BAQgBA,oBAAkB;;aAAlBA,kBAAkB;;;yBARA,QAAQ;;;;;;qBAGtB,iBAAiB;AAErC,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,sBAAsB,CAAC,AAAsB,AAAC;AAGtE,SAASF,kBAAkB,CAACG,aAAwB,EAAa;IACtE,mFAAmF;IACnF,OAAO,SAASC,cAAc,CAACC,GAAG,EAAEC,OAAO,GAAG,EAAE,EAAE;QAChD,IAAI,CAACA,OAAO,CAACC,UAAU,IAAIC,IAAG,IAAA,CAACC,UAAU,EAAE;YACzCR,KAAK,CAAC,cAAc,EAAEO,IAAG,IAAA,CAACC,UAAU,CAAC,CAAC;YACtCH,OAAO,CAACC,UAAU,GAAG,IAAIG,CAAAA,OAAiB,EAAA,CAAA,kBAAA,EAAE,CAAC;QAC/C,CAAC;QAED,OAAOP,aAAa,CAACE,GAAG,EAAEC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC;AACJ,CAAC"}