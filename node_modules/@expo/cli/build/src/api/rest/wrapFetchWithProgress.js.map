{"version":3,"sources":["../../../../src/api/rest/wrapFetchWithProgress.ts"],"sourcesContent":["import { Response } from 'undici';\n\nimport { FetchLike } from './client.types';\nimport * as Log from '../../log';\n\nconst debug = require('debug')('expo:api:fetch:progress') as typeof console.log;\n\nexport function wrapFetchWithProgress(fetch: FetchLike): FetchLike {\n  return function fetchWithProgress(url, init) {\n    return fetch(url, init).then((response) => {\n      const onProgress = init?.onProgress;\n\n      // Abort if no `onProgress` is provided, the request failed, or there is no response body\n      if (!onProgress || !response.ok || !response.body) {\n        return response;\n      }\n\n      // Calculate total progress size\n      const contentLength = response.headers.get('Content-Length');\n      const progressTotal = Number(contentLength);\n\n      debug(`Download size: %d`, progressTotal);\n\n      // Abort if the `Content-Length` header is missing or invalid\n      if (!progressTotal || isNaN(progressTotal) || progressTotal < 0) {\n        Log.warn(\n          'Progress callback not supported for network request because \"Content-Length\" header missing or invalid in response from URL:',\n          url.toString()\n        );\n        return response;\n      }\n\n      debug(`Starting progress animation for: %s`, url);\n\n      // Initialize the progression variables\n      let progressCurrent = 0;\n      const progressUpdate = () => {\n        const progress = progressCurrent / progressTotal || 0;\n        onProgress({\n          progress,\n          total: progressTotal,\n          loaded: progressCurrent,\n        });\n      };\n\n      // Create a new body-wrapping stream that handles the progression methods\n      const bodyReader = response.body.getReader();\n      const bodyWithProgress = new ReadableStream({\n        start(controller) {\n          function next() {\n            bodyReader.read().then(({ done, value }) => {\n              // Close the controller once stream is done\n              if (done) return controller.close();\n\n              // Update the progression\n              progressCurrent += Buffer.byteLength(value);\n              progressUpdate();\n\n              // Continue the stream, and read the next chunk\n              controller.enqueue(value);\n              next();\n            });\n          }\n\n          progressUpdate();\n          next();\n        },\n      });\n\n      // Return the new response with the wrapped body stream\n      return new Response(bodyWithProgress as any, response);\n    });\n  };\n}\n"],"names":["wrapFetchWithProgress","debug","require","fetch","fetchWithProgress","url","init","then","response","onProgress","ok","body","contentLength","headers","get","progressTotal","Number","isNaN","Log","warn","toString","progressCurrent","progressUpdate","progress","total","loaded","bodyReader","getReader","bodyWithProgress","ReadableStream","start","controller","next","read","done","value","close","Buffer","byteLength","enqueue","Response"],"mappings":"AAAA;;;;+BAOgBA,uBAAqB;;aAArBA,qBAAqB;;;yBAPZ,QAAQ;;;;;;2DAGZ,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhC,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,yBAAyB,CAAC,AAAsB,AAAC;AAEzE,SAASF,qBAAqB,CAACG,KAAgB,EAAa;IACjE,OAAO,SAASC,iBAAiB,CAACC,GAAG,EAAEC,IAAI,EAAE;QAC3C,OAAOH,KAAK,CAACE,GAAG,EAAEC,IAAI,CAAC,CAACC,IAAI,CAAC,CAACC,QAAQ,GAAK;YACzC,MAAMC,UAAU,GAAGH,IAAI,QAAY,GAAhBA,KAAAA,CAAgB,GAAhBA,IAAI,CAAEG,UAAU,AAAC;YAEpC,yFAAyF;YACzF,IAAI,CAACA,UAAU,IAAI,CAACD,QAAQ,CAACE,EAAE,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE;gBACjD,OAAOH,QAAQ,CAAC;YAClB,CAAC;YAED,gCAAgC;YAChC,MAAMI,aAAa,GAAGJ,QAAQ,CAACK,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,AAAC;YAC7D,MAAMC,aAAa,GAAGC,MAAM,CAACJ,aAAa,CAAC,AAAC;YAE5CX,KAAK,CAAC,CAAC,iBAAiB,CAAC,EAAEc,aAAa,CAAC,CAAC;YAE1C,6DAA6D;YAC7D,IAAI,CAACA,aAAa,IAAIE,KAAK,CAACF,aAAa,CAAC,IAAIA,aAAa,GAAG,CAAC,EAAE;gBAC/DG,IAAG,CAACC,IAAI,CACN,8HAA8H,EAC9Hd,GAAG,CAACe,QAAQ,EAAE,CACf,CAAC;gBACF,OAAOZ,QAAQ,CAAC;YAClB,CAAC;YAEDP,KAAK,CAAC,CAAC,mCAAmC,CAAC,EAAEI,GAAG,CAAC,CAAC;YAElD,uCAAuC;YACvC,IAAIgB,eAAe,GAAG,CAAC,AAAC;YACxB,MAAMC,cAAc,GAAG,IAAM;gBAC3B,MAAMC,QAAQ,GAAGF,eAAe,GAAGN,aAAa,IAAI,CAAC,AAAC;gBACtDN,UAAU,CAAC;oBACTc,QAAQ;oBACRC,KAAK,EAAET,aAAa;oBACpBU,MAAM,EAAEJ,eAAe;iBACxB,CAAC,CAAC;YACL,CAAC,AAAC;YAEF,yEAAyE;YACzE,MAAMK,UAAU,GAAGlB,QAAQ,CAACG,IAAI,CAACgB,SAAS,EAAE,AAAC;YAC7C,MAAMC,gBAAgB,GAAG,IAAIC,cAAc,CAAC;gBAC1CC,KAAK,EAACC,UAAU,EAAE;oBAChB,SAASC,IAAI,GAAG;wBACdN,UAAU,CAACO,IAAI,EAAE,CAAC1B,IAAI,CAAC,CAAC,EAAE2B,IAAI,CAAA,EAAEC,KAAK,CAAA,EAAE,GAAK;4BAC1C,2CAA2C;4BAC3C,IAAID,IAAI,EAAE,OAAOH,UAAU,CAACK,KAAK,EAAE,CAAC;4BAEpC,yBAAyB;4BACzBf,eAAe,IAAIgB,MAAM,CAACC,UAAU,CAACH,KAAK,CAAC,CAAC;4BAC5Cb,cAAc,EAAE,CAAC;4BAEjB,+CAA+C;4BAC/CS,UAAU,CAACQ,OAAO,CAACJ,KAAK,CAAC,CAAC;4BAC1BH,IAAI,EAAE,CAAC;wBACT,CAAC,CAAC,CAAC;oBACL,CAAC;oBAEDV,cAAc,EAAE,CAAC;oBACjBU,IAAI,EAAE,CAAC;gBACT,CAAC;aACF,CAAC,AAAC;YAEH,uDAAuD;YACvD,OAAO,IAAIQ,CAAAA,OAAQ,EAAA,CAAA,SAAA,CAACZ,gBAAgB,EAASpB,QAAQ,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC"}