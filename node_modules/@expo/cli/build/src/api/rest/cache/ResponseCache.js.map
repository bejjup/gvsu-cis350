{"version":3,"sources":["../../../../../src/api/rest/cache/ResponseCache.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { ReadStream } from 'fs';\nimport type { Response, RequestInfo, RequestInit } from 'undici';\n\nconst GLOBAL_CACHE_VERSION = 4;\n\nexport type ResponseCacheEntry = {\n  body: import('stream/web').ReadableStream;\n  info: ReturnType<typeof getResponseInfo>;\n};\n\nexport interface ResponseCache {\n  /** Load the response info from cache, if any */\n  get(cacheKey: string): Promise<ResponseCacheEntry | undefined>;\n  /** Store the response info to cache, and return the cached info */\n  set(cacheKey: string, response: ResponseCacheEntry): Promise<ResponseCacheEntry | undefined>;\n  /** Remove a response entry from the cache */\n  remove(cacheKey: string): Promise<void>;\n}\n\nexport function getResponseInfo(response: Response) {\n  return {\n    url: response.url,\n    status: response.status,\n    statusText: response.statusText,\n    headers: Object.fromEntries(response.headers.entries()),\n  };\n}\n\nexport function getRequestCacheKey(info: RequestInfo, init?: RequestInit) {\n  const infoKeyData = getRequestInfoCacheData(info);\n  const initKeyData = { body: init?.body ? getRequestBodyCacheData(init.body) : undefined };\n\n  return crypto\n    .createHash('md5')\n    .update(JSON.stringify([infoKeyData, initKeyData, GLOBAL_CACHE_VERSION]))\n    .digest('hex');\n}\n\n/** @internal Exposed for testing */\nexport function getRequestInfoCacheData(info: RequestInfo) {\n  if (typeof info === 'string') {\n    return { url: info };\n  }\n\n  if (info instanceof URL) {\n    return { url: info.toString() };\n  }\n\n  if (info instanceof Request) {\n    return {\n      // cache: req.cache,\n      credentials: info.credentials.toString(),\n      destination: info.destination.toString(),\n      headers: Object.fromEntries(info.headers.entries()),\n      integrity: info.integrity,\n      method: info.method,\n      redirect: info.redirect,\n      referrer: info.referrer,\n      referrerPolicy: info.referrerPolicy,\n      url: info.url.toString(),\n      // body: // TODO\n    };\n  }\n\n  throw new Error('Unsupported request info type for caching: ' + typeof info);\n}\n\n/** @internal Exposed for testing */\nexport function getRequestBodyCacheData(body: RequestInit['body']) {\n  if (!body) {\n    return body;\n  }\n\n  if (typeof body === 'string') {\n    return body;\n  }\n\n  if (body instanceof URLSearchParams) {\n    return body.toString();\n  }\n\n  // Supported for legacy purposes because node-fetch uses fs.readStream\n  if (body instanceof ReadStream) {\n    return body.path;\n  }\n\n  if (body.toString && body.toString() === '[object FormData]') {\n    return new URLSearchParams(body as any).toString();\n  }\n\n  if (body instanceof Buffer) {\n    return body.toString();\n  }\n\n  throw new Error(`Unsupported request body type for caching: ${typeof body}`);\n}\n"],"names":["getResponseInfo","getRequestCacheKey","getRequestInfoCacheData","getRequestBodyCacheData","GLOBAL_CACHE_VERSION","response","url","status","statusText","headers","Object","fromEntries","entries","info","init","infoKeyData","initKeyData","body","undefined","crypto","createHash","update","JSON","stringify","digest","URL","toString","Request","credentials","destination","integrity","method","redirect","referrer","referrerPolicy","Error","URLSearchParams","ReadStream","path","Buffer"],"mappings":"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"}