{"version":3,"sources":["../../../../src/api/user/user.ts"],"sourcesContent":["import { gql } from '@urql/core';\nimport { promises as fs } from 'fs';\n\nimport { getAccessToken, getSession, setSessionAsync } from './UserSettings';\nimport { getSessionUsingBrowserAuthFlowAsync } from './expoSsoLauncher';\nimport { CurrentUserQuery } from '../../graphql/generated';\nimport * as Log from '../../log';\nimport { getDevelopmentCodeSigningDirectory } from '../../utils/codesigning';\nimport { env } from '../../utils/env';\nimport { getExpoWebsiteBaseUrl } from '../endpoint';\nimport { graphqlClient } from '../graphql/client';\nimport { UserQuery } from '../graphql/queries/UserQuery';\nimport { fetchAsync } from '../rest/client';\n\nexport type Actor = NonNullable<CurrentUserQuery['meActor']>;\n\nlet currentUser: Actor | undefined;\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Resolve the name of the actor, either normal user or robot user.\n * This should be used whenever the \"current user\" needs to be displayed.\n * The display name CANNOT be used as project owner.\n */\nexport function getActorDisplayName(user?: Actor): string {\n  switch (user?.__typename) {\n    case 'User':\n      return user.username;\n    case 'SSOUser':\n      return user.username;\n    case 'Robot':\n      return user.firstName ? `${user.firstName} (robot)` : 'robot';\n    default:\n      return ANONYMOUS_USERNAME;\n  }\n}\n\nexport async function getUserAsync(): Promise<Actor | undefined> {\n  const hasCredentials = getAccessToken() || getSession()?.sessionSecret;\n  if (!env.EXPO_OFFLINE && !currentUser && hasCredentials) {\n    const user = await UserQuery.currentUserAsync();\n    currentUser = user ?? undefined;\n  }\n  return currentUser;\n}\n\nexport async function loginAsync(credentials: {\n  username: string;\n  password: string;\n  otp?: string;\n}): Promise<void> {\n  const res = await fetchAsync('auth/loginAsync', {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n  });\n  const json: any = await res.json();\n  const sessionSecret = json.data.sessionSecret;\n\n  const userData = await fetchUserAsync({ sessionSecret });\n\n  await setSessionAsync({\n    sessionSecret,\n    userId: userData.id,\n    username: userData.username,\n    currentConnection: 'Username-Password-Authentication',\n  });\n}\n\nexport async function ssoLoginAsync(): Promise<void> {\n  const sessionSecret = await getSessionUsingBrowserAuthFlowAsync({\n    expoWebsiteUrl: getExpoWebsiteBaseUrl(),\n  });\n  const userData = await fetchUserAsync({ sessionSecret });\n\n  await setSessionAsync({\n    sessionSecret,\n    userId: userData.id,\n    username: userData.username,\n    currentConnection: 'Browser-Flow-Authentication',\n  });\n}\n\nexport async function logoutAsync(): Promise<void> {\n  currentUser = undefined;\n  await Promise.all([\n    fs.rm(getDevelopmentCodeSigningDirectory(), { recursive: true, force: true }),\n    setSessionAsync(undefined),\n  ]);\n  Log.log('Logged out');\n}\n\nasync function fetchUserAsync({\n  sessionSecret,\n}: {\n  sessionSecret: string;\n}): Promise<{ id: string; username: string }> {\n  const result = await graphqlClient\n    .query(\n      gql`\n        query UserQuery {\n          meUserActor {\n            id\n            username\n          }\n        }\n      `,\n      {},\n      {\n        fetchOptions: {\n          headers: {\n            'expo-session': sessionSecret,\n          },\n        },\n        additionalTypenames: [] /* UserQuery has immutable fields */,\n      }\n    )\n    .toPromise();\n  const { data } = result;\n  return {\n    id: data.meUserActor.id,\n    username: data.meUserActor.username,\n  };\n}\n"],"names":["ANONYMOUS_USERNAME","getActorDisplayName","getUserAsync","loginAsync","ssoLoginAsync","logoutAsync","currentUser","user","__typename","username","firstName","getSession","hasCredentials","getAccessToken","sessionSecret","env","EXPO_OFFLINE","UserQuery","currentUserAsync","undefined","credentials","res","fetchAsync","method","body","JSON","stringify","json","data","userData","fetchUserAsync","setSessionAsync","userId","id","currentConnection","getSessionUsingBrowserAuthFlowAsync","expoWebsiteUrl","getExpoWebsiteBaseUrl","Promise","all","fs","rm","getDevelopmentCodeSigningDirectory","recursive","force","Log","log","result","graphqlClient","query","gql","fetchOptions","headers","additionalTypenames","toPromise","meUserActor"],"mappings":"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"}