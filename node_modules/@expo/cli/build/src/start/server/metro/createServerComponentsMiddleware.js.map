{"version":3,"sources":["../../../../../src/start/server/metro/createServerComponentsMiddleware.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getMetroServerRoot } from '@expo/config/paths';\nimport { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport { getRscMiddleware } from '@expo/server/build/middleware/rsc';\nimport assert from 'assert';\nimport path from 'path';\nimport url from 'url';\n\nimport { logMetroError } from './metroErrorInterface';\nimport { ExportAssetMap } from '../../../export/saveAssets';\nimport { stripAnsi } from '../../../utils/ansi';\nimport { memoize } from '../../../utils/fn';\nimport { getIpAddress } from '../../../utils/ip';\nimport { streamToStringAsync } from '../../../utils/stream';\nimport { createBuiltinAPIRequestHandler } from '../middleware/createBuiltinAPIRequestHandler';\nimport {\n  createBundleUrlSearchParams,\n  ExpoMetroOptions,\n  getMetroOptionsFromUrl,\n} from '../middleware/metroOptions';\n\nconst debug = require('debug')('expo:rsc') as typeof console.log;\n\ntype SSRLoadModuleArtifactsFunc = (\n  filePath: string,\n  specificOptions?: Partial<ExpoMetroOptions>\n) => Promise<{ artifacts: SerialAsset[]; src: string }>;\n\ntype SSRLoadModuleFunc = <T extends Record<string, any>>(\n  filePath: string,\n  specificOptions?: Partial<ExpoMetroOptions>,\n  extras?: { hot?: boolean }\n) => Promise<T>;\n\nconst getMetroServerRootMemo = memoize(getMetroServerRoot);\n\nexport function createServerComponentsMiddleware(\n  projectRoot: string,\n  {\n    rscPath,\n    instanceMetroOptions,\n    ssrLoadModule,\n    ssrLoadModuleArtifacts,\n    useClientRouter,\n    createModuleId,\n  }: {\n    rscPath: string;\n    instanceMetroOptions: Partial<ExpoMetroOptions>;\n    ssrLoadModule: SSRLoadModuleFunc;\n    ssrLoadModuleArtifacts: SSRLoadModuleArtifactsFunc;\n    useClientRouter: boolean;\n    createModuleId: (\n      filePath: string,\n      context: { platform: string; environment: string }\n    ) => string | number;\n  }\n) {\n  const routerModule = useClientRouter\n    ? 'expo-router/build/rsc/router/noopRouter'\n    : 'expo-router/build/rsc/router/expo-definedRouter';\n\n  const rscMiddleware = getRscMiddleware({\n    config: {},\n    // Disabled in development\n    baseUrl: '',\n    rscPath,\n    onError: console.error,\n    renderRsc: async (args) => {\n      // In development we should add simulated versions of common production headers.\n      if (args.headers['x-real-ip'] == null) {\n        args.headers['x-real-ip'] = getIpAddress();\n      }\n      if (args.headers['x-forwarded-for'] == null) {\n        args.headers['x-forwarded-for'] = args.headers['x-real-ip'];\n      }\n      if (args.headers['x-forwarded-proto'] == null) {\n        args.headers['x-forwarded-proto'] = 'http';\n      }\n\n      // Dev server-only implementation.\n      try {\n        return await renderRscToReadableStream({\n          ...args,\n          headers: new Headers(args.headers),\n          body: args.body!,\n        });\n      } catch (error: any) {\n        // If you get a codeFrame error during SSR like when using a Class component in React Server Components, then this\n        // will throw with:\n        // {\n        //   rawObject: {\n        //     type: 'TransformError',\n        //     lineNumber: 0,\n        //     errors: [ [Object] ],\n        //     name: 'SyntaxError',\n        //     message: '...',\n        //   }\n        // }\n\n        // TODO: Revisit all error handling now that we do direct metro bundling...\n        await logMetroError(projectRoot, { error });\n\n        const sanitizedServerMessage = stripAnsi(error.message) ?? error.message;\n        throw new Response(sanitizedServerMessage, {\n          status: 500,\n          headers: {\n            'Content-Type': 'text/plain',\n          },\n        });\n      }\n    },\n  });\n\n  let rscPathPrefix = rscPath;\n  if (rscPathPrefix !== '/') {\n    rscPathPrefix += '/';\n  }\n\n  async function exportServerActionsAsync(\n    {\n      platform,\n      entryPoints,\n      domRoot,\n    }: { platform: string; entryPoints: string[]; domRoot?: string },\n    files: ExportAssetMap\n  ): Promise<{\n    clientBoundaries: string[];\n    manifest: Record<string, [string, string]>;\n  }> {\n    const uniqueEntryPoints = [...new Set(entryPoints)];\n    // TODO: Support multiple entry points in a single split server bundle...\n    const manifest: Record<string, [string, string]> = {};\n    const nestedClientBoundaries: string[] = [];\n\n    for (const entryPoint of uniqueEntryPoints) {\n      const contents = await ssrLoadModuleArtifacts(entryPoint, {\n        environment: 'react-server',\n        platform,\n        // Ignore the metro runtime to avoid overwriting the original in the API route.\n        modulesOnly: true,\n        // Required\n        runModule: true,\n        // Required to ensure assets load as client boundaries.\n        domRoot,\n      });\n\n      const reactClientReferences = contents.artifacts\n        .filter((a) => a.type === 'js')[0]\n        .metadata.reactClientReferences?.map((ref) => fileURLToFilePath(ref));\n\n      if (reactClientReferences) {\n        nestedClientBoundaries.push(...reactClientReferences!);\n      }\n\n      // Naive check to ensure the module runtime is not included in the server action bundle.\n      if (contents.src.includes('The experimental Metro feature')) {\n        throw new Error(\n          'Internal error: module runtime should not be included in server action bundles: ' +\n            entryPoint\n        );\n      }\n\n      const relativeName = createModuleId(entryPoint, {\n        platform,\n        environment: 'react-server',\n      });\n      const safeName = path.basename(contents.artifacts.find((a) => a.type === 'js')!.filename!);\n\n      const outputName = `_expo/rsc/${platform}/${safeName}`;\n      // While we're here, export the router for the server to dynamically render RSC.\n      files.set(outputName, {\n        targetDomain: 'server',\n        contents: wrapBundle(contents.src),\n      });\n\n      // Import relative to `dist/server/_expo/rsc/web/router.js`\n      manifest[entryPoint] = [String(relativeName), outputName];\n    }\n\n    // Save the SSR manifest so we can perform more replacements in the server renderer and with server actions.\n    files.set(`_expo/rsc/${platform}/action-manifest.js`, {\n      targetDomain: 'server',\n      contents: 'module.exports = ' + JSON.stringify(manifest),\n    });\n\n    return { manifest, clientBoundaries: nestedClientBoundaries };\n  }\n\n  async function getExpoRouterClientReferencesAsync(\n    { platform, domRoot }: { platform: string; domRoot?: string },\n    files: ExportAssetMap\n  ): Promise<{\n    reactClientReferences: string[];\n    reactServerReferences: string[];\n    cssModules: SerialAsset[];\n  }> {\n    const contents = await ssrLoadModuleArtifacts(routerModule, {\n      environment: 'react-server',\n      platform,\n      modulesOnly: true,\n      domRoot,\n    });\n\n    // Extract the global CSS modules that are imported from the router.\n    // These will be injected in the head of the HTML document for the website.\n    const cssModules = contents.artifacts.filter((a) => a.type.startsWith('css'));\n\n    const reactServerReferences = contents.artifacts\n      .filter((a) => a.type === 'js')[0]\n      .metadata.reactServerReferences?.map((ref) => fileURLToFilePath(ref));\n\n    if (!reactServerReferences) {\n      throw new Error(\n        'Static server action references were not returned from the Metro SSR bundle for definedRouter'\n      );\n    }\n    debug('React client boundaries:', reactServerReferences);\n\n    const reactClientReferences = contents.artifacts\n      .filter((a) => a.type === 'js')[0]\n      .metadata.reactClientReferences?.map((ref) => fileURLToFilePath(ref));\n\n    if (!reactClientReferences) {\n      throw new Error(\n        'Static client references were not returned from the Metro SSR bundle for definedRouter'\n      );\n    }\n    debug('React client boundaries:', reactClientReferences);\n\n    // While we're here, export the router for the server to dynamically render RSC.\n    files.set(`_expo/rsc/${platform}/router.js`, {\n      targetDomain: 'server',\n      contents: wrapBundle(contents.src),\n    });\n\n    return { reactClientReferences, reactServerReferences, cssModules };\n  }\n\n  async function getExpoRouterRscEntriesGetterAsync({ platform }: { platform: string }) {\n    return ssrLoadModule<typeof import('expo-router/build/rsc/router/expo-definedRouter')>(\n      routerModule,\n      {\n        environment: 'react-server',\n        platform,\n      },\n      {\n        hot: true,\n      }\n    );\n  }\n\n  function getResolveClientEntry(context: {\n    platform: string;\n    engine?: 'hermes' | null;\n    ssrManifest?: Map<string, string>;\n  }): (\n    file: string,\n    isServer: boolean\n  ) => {\n    id: string;\n    chunks: string[];\n  } {\n    const serverRoot = getMetroServerRootMemo(projectRoot);\n\n    const {\n      mode,\n      minify = false,\n      isExporting,\n      baseUrl,\n      routerRoot,\n      asyncRoutes,\n      preserveEnvVars,\n      reactCompiler,\n      lazy,\n    } = instanceMetroOptions;\n\n    assert(\n      isExporting != null &&\n        baseUrl != null &&\n        mode != null &&\n        routerRoot != null &&\n        asyncRoutes != null,\n      `The server must be started. (isExporting: ${isExporting}, baseUrl: ${baseUrl}, mode: ${mode}, routerRoot: ${routerRoot}, asyncRoutes: ${asyncRoutes})`\n    );\n\n    return (file: string, isServer: boolean) => {\n      if (isExporting) {\n        assert(context.ssrManifest, 'SSR manifest must exist when exporting');\n        const relativeFilePath = path.relative(serverRoot, file);\n\n        assert(\n          context.ssrManifest.has(relativeFilePath),\n          `SSR manifest is missing client boundary \"${relativeFilePath}\"`\n        );\n\n        const chunk = context.ssrManifest.get(relativeFilePath);\n\n        return {\n          id: String(createModuleId(file, { platform: context.platform, environment: 'client' })),\n          chunks: chunk != null ? [chunk] : [],\n        };\n      }\n\n      const environment = isServer ? 'react-server' : 'client';\n      const searchParams = createBundleUrlSearchParams({\n        mainModuleName: '',\n        platform: context.platform,\n        mode,\n        minify,\n        lazy,\n        preserveEnvVars,\n        asyncRoutes,\n        baseUrl,\n        routerRoot,\n        isExporting,\n        reactCompiler: !!reactCompiler,\n        engine: context.engine ?? undefined,\n        bytecode: false,\n        clientBoundaries: [],\n        inlineSourceMap: false,\n        environment,\n        modulesOnly: true,\n        runModule: false,\n      });\n\n      searchParams.set('resolver.clientboundary', String(true));\n\n      const clientReferenceUrl = new URL('http://a');\n\n      // TICKLE: Handshake 1\n      searchParams.set('xRSC', '1');\n\n      clientReferenceUrl.search = searchParams.toString();\n\n      const filePath = file.startsWith('file://') ? fileURLToFilePath(file) : file;\n\n      const relativeFilePath = path.relative(serverRoot, filePath);\n\n      clientReferenceUrl.pathname = relativeFilePath;\n\n      // Ensure url.pathname ends with '.bundle'\n      if (!clientReferenceUrl.pathname.endsWith('.bundle')) {\n        clientReferenceUrl.pathname += '.bundle';\n      }\n\n      // Return relative URLs to help Android fetch from wherever it was loaded from since it doesn't support localhost.\n      const chunkName = clientReferenceUrl.pathname + clientReferenceUrl.search;\n\n      return {\n        id: String(createModuleId(filePath, { platform: context.platform, environment })),\n        chunks: [chunkName],\n      };\n    };\n  }\n\n  const rscRendererCache = new Map<string, typeof import('expo-router/build/rsc/rsc-renderer')>();\n\n  async function getRscRendererAsync(platform: string) {\n    // NOTE(EvanBacon): We memoize this now that there's a persistent server storage cache for Server Actions.\n    if (rscRendererCache.has(platform)) {\n      return rscRendererCache.get(platform)!;\n    }\n\n    // TODO: Extract CSS Modules / Assets from the bundler process\n    const renderer = await ssrLoadModule<typeof import('expo-router/build/rsc/rsc-renderer')>(\n      'expo-router/build/rsc/rsc-renderer',\n      {\n        environment: 'react-server',\n        platform,\n      }\n    );\n\n    rscRendererCache.set(platform, renderer);\n    return renderer;\n  }\n\n  const rscRenderContext = new Map<string, any>();\n\n  function getRscRenderContext(platform: string) {\n    // NOTE(EvanBacon): We memoize this now that there's a persistent server storage cache for Server Actions.\n    if (rscRenderContext.has(platform)) {\n      return rscRenderContext.get(platform)!;\n    }\n\n    const context = {};\n\n    rscRenderContext.set(platform, context);\n    return context;\n  }\n\n  async function renderRscToReadableStream(\n    {\n      input,\n      headers,\n      method,\n      platform,\n      body,\n      engine,\n      contentType,\n      ssrManifest,\n      decodedBody,\n    }: {\n      input: string;\n      headers: Headers;\n      method: 'POST' | 'GET';\n      platform: string;\n      body?: ReadableStream<Uint8Array>;\n      engine?: 'hermes' | null;\n      contentType?: string;\n      ssrManifest?: Map<string, string>;\n      decodedBody?: unknown;\n    },\n    isExporting: boolean | undefined = instanceMetroOptions.isExporting\n  ) {\n    assert(\n      isExporting != null,\n      'The server must be started before calling renderRscToReadableStream.'\n    );\n\n    if (method === 'POST') {\n      assert(body, 'Server request must be provided when method is POST (server actions)');\n    }\n\n    const context = getRscRenderContext(platform);\n\n    context['__expo_requestHeaders'] = headers;\n\n    const { renderRsc } = await getRscRendererAsync(platform);\n\n    return renderRsc(\n      {\n        body,\n        decodedBody,\n        context,\n        config: {},\n        input,\n        contentType,\n      },\n      {\n        isExporting,\n        entries: await getExpoRouterRscEntriesGetterAsync({ platform }),\n        resolveClientEntry: getResolveClientEntry({ platform, engine, ssrManifest }),\n        async loadServerModuleRsc(urlFragment) {\n          const serverRoot = getMetroServerRootMemo(projectRoot);\n\n          debug('[SSR] loadServerModuleRsc:', urlFragment);\n\n          const options = getMetroOptionsFromUrl(urlFragment);\n\n          return ssrLoadModule(path.join(serverRoot, options.mainModuleName), options);\n        },\n      }\n    );\n  }\n\n  return {\n    // Get the static client boundaries (no dead code elimination allowed) for the production export.\n    getExpoRouterClientReferencesAsync,\n    exportServerActionsAsync,\n\n    async exportRoutesAsync(\n      {\n        platform,\n        ssrManifest,\n      }: {\n        platform: string;\n        ssrManifest: Map<string, string>;\n      },\n      files: ExportAssetMap\n    ) {\n      // TODO: When we add web SSR support, we need to extract CSS Modules / Assets from the bundler process to prevent FLOUC.\n      const { getBuildConfig } = (await getExpoRouterRscEntriesGetterAsync({ platform })).default;\n\n      // Get all the routes to render.\n      const buildConfig = await getBuildConfig!(async () =>\n        // TODO: Rework prefetching code to use Metro runtime.\n        []\n      );\n\n      await Promise.all(\n        Array.from(buildConfig).map(async ({ entries }) => {\n          for (const { input, isStatic } of entries || []) {\n            if (!isStatic) {\n              debug('Skipping static export for route', { input });\n              continue;\n            }\n            const destRscFile = path.join('_flight', platform, encodeInput(input));\n\n            const pipe = await renderRscToReadableStream(\n              {\n                input,\n                method: 'GET',\n                platform,\n                headers: new Headers(),\n                ssrManifest,\n              },\n              true\n            );\n\n            const rsc = await streamToStringAsync(pipe);\n            debug('RSC Payload', { platform, input, rsc });\n\n            files.set(destRscFile, {\n              contents: rsc,\n              targetDomain: 'client',\n              rscId: input,\n            });\n          }\n        })\n      );\n    },\n\n    middleware: createBuiltinAPIRequestHandler(\n      // Match `/_flight/[platform]/[...path]`\n      (req) => {\n        return getFullUrl(req.url).pathname.startsWith(rscPathPrefix);\n      },\n      rscMiddleware\n    ),\n    onReloadRscEvent: () => {\n      // NOTE: We cannot clear the renderer context because it would break the mounted context state.\n\n      // Clear the render context to ensure that the next render is a fresh start.\n      rscRenderContext.clear();\n    },\n  };\n}\n\nconst getFullUrl = (url: string) => {\n  try {\n    return new URL(url);\n  } catch {\n    return new URL(url, 'http://localhost:0');\n  }\n};\n\nexport const fileURLToFilePath = (fileURL: string) => {\n  return url.fileURLToPath(fileURL);\n};\n\nconst encodeInput = (input: string) => {\n  if (input === '') {\n    return 'index.txt';\n  }\n  if (input === 'index') {\n    throw new Error('Input should not be `index`');\n  }\n  if (input.startsWith('/')) {\n    throw new Error('Input should not start with `/`');\n  }\n  if (input.endsWith('/')) {\n    throw new Error('Input should not end with `/`');\n  }\n  return input + '.txt';\n};\n\nfunction wrapBundle(str: string) {\n  // Skip the metro runtime so debugging is a bit easier.\n  // Replace the __r() call with an export statement.\n  // Use gm to apply to the last require line. This is needed when the bundle has side-effects.\n  return str.replace(/^(__r\\(.*\\);)$/gm, 'module.exports = $1');\n}\n"],"names":["createServerComponentsMiddleware","fileURLToFilePath","debug","require","getMetroServerRootMemo","memoize","getMetroServerRoot","projectRoot","rscPath","instanceMetroOptions","ssrLoadModule","ssrLoadModuleArtifacts","useClientRouter","createModuleId","routerModule","rscMiddleware","getRscMiddleware","config","baseUrl","onError","console","error","renderRsc","args","headers","getIpAddress","renderRscToReadableStream","Headers","body","logMetroError","sanitizedServerMessage","stripAnsi","message","Response","status","rscPathPrefix","exportServerActionsAsync","platform","entryPoints","domRoot","files","uniqueEntryPoints","Set","manifest","nestedClientBoundaries","entryPoint","contents","environment","modulesOnly","runModule","reactClientReferences","artifacts","filter","a","type","metadata","map","ref","push","src","includes","Error","relativeName","safeName","path","basename","find","filename","outputName","set","targetDomain","wrapBundle","String","JSON","stringify","clientBoundaries","getExpoRouterClientReferencesAsync","cssModules","startsWith","reactServerReferences","getExpoRouterRscEntriesGetterAsync","hot","getResolveClientEntry","context","serverRoot","mode","minify","isExporting","routerRoot","asyncRoutes","preserveEnvVars","reactCompiler","lazy","assert","file","isServer","ssrManifest","relativeFilePath","relative","has","chunk","get","id","chunks","searchParams","createBundleUrlSearchParams","mainModuleName","engine","undefined","bytecode","inlineSourceMap","clientReferenceUrl","URL","search","toString","filePath","pathname","endsWith","chunkName","rscRendererCache","Map","getRscRendererAsync","renderer","rscRenderContext","getRscRenderContext","input","method","contentType","decodedBody","entries","resolveClientEntry","loadServerModuleRsc","urlFragment","options","getMetroOptionsFromUrl","join","exportRoutesAsync","getBuildConfig","default","buildConfig","Promise","all","Array","from","isStatic","destRscFile","encodeInput","pipe","rsc","streamToStringAsync","rscId","middleware","createBuiltinAPIRequestHandler","req","getFullUrl","url","onReloadRscEvent","clear","fileURL","fileURLToPath","str","replace"],"mappings":"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"}