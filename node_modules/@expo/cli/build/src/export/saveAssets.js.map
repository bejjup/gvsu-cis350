{"version":3,"sources":["../../../src/export/saveAssets.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport type { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport Metro from 'metro';\nimport path from 'path';\nimport prettyBytes from 'pretty-bytes';\n\nimport { Log } from '../log';\nimport { env } from '../utils/env';\n\nconst BLT = '\\u203A';\n\nexport type BundleOptions = {\n  entryPoint: string;\n  platform: 'android' | 'ios' | 'web';\n  dev?: boolean;\n  minify?: boolean;\n  bytecode: boolean;\n  sourceMapUrl?: string;\n  sourcemaps?: boolean;\n};\n\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n  fileHashes: string[]; // added by the hashAssets asset plugin\n};\n\nexport type BundleOutput = {\n  artifacts: SerialAsset[];\n  assets: readonly BundleAssetWithFileHashes[];\n};\n\nexport type ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\nexport type ExportAssetDescriptor = {\n  contents: string | Buffer;\n  originFilename?: string;\n  /** An identifier for grouping together variations of the same asset. */\n  assetId?: string;\n  /** Expo Router route path for formatting the HTML output. */\n  routeId?: string;\n  /** Expo Router API route path for formatting the server function output. */\n  apiRouteId?: string;\n  /** Expo Router route path for formatting the RSC output. */\n  rscId?: string;\n  /** A key for grouping together output files by server- or client-side. */\n  targetDomain?: 'server' | 'client';\n};\n\nexport type ExportAssetMap = Map<string, ExportAssetDescriptor>;\n\nexport async function persistMetroFilesAsync(files: ExportAssetMap, outputDir: string) {\n  if (!files.size) {\n    return;\n  }\n  fs.mkdirSync(path.join(outputDir), { recursive: true });\n\n  // Test fixtures:\n  // Log.log(\n  //   JSON.stringify(\n  //     Object.fromEntries([...files.entries()].map(([k, v]) => [k, { ...v, contents: '' }]))\n  //   )\n  // );\n\n  const assetEntries: [string, ExportAssetDescriptor][] = [];\n  const apiRouteEntries: [string, ExportAssetDescriptor][] = [];\n  const routeEntries: [string, ExportAssetDescriptor][] = [];\n  const rscEntries: [string, ExportAssetDescriptor][] = [];\n  const remainingEntries: [string, ExportAssetDescriptor][] = [];\n\n  let hasServerOutput = false;\n  for (const asset of files.entries()) {\n    hasServerOutput = hasServerOutput || asset[1].targetDomain === 'server';\n    if (asset[1].assetId) assetEntries.push(asset);\n    else if (asset[1].routeId != null) routeEntries.push(asset);\n    else if (asset[1].apiRouteId != null) apiRouteEntries.push(asset);\n    else if (asset[1].rscId != null) rscEntries.push(asset);\n    else remainingEntries.push(asset);\n  }\n\n  const groups = groupBy(assetEntries, ([, { assetId }]) => assetId!);\n\n  const contentSize = (contents: string | Buffer) => {\n    const length =\n      typeof contents === 'string' ? Buffer.byteLength(contents, 'utf8') : contents.length;\n    return length;\n  };\n\n  const sizeStr = (contents: string | Buffer) => {\n    const length = contentSize(contents);\n    const size = chalk.gray`(${prettyBytes(length)})`;\n    return size;\n  };\n\n  // TODO: If any Expo Router is used, then use a new style which is more simple:\n  // `chalk.gray(/path/to/) + chalk.cyan('route')`\n  // | index.html (1.2kb)\n  // | /path\n  //   | other.html (1.2kb)\n\n  const isExpoRouter = routeEntries.length;\n\n  // Phase out printing all the assets as users can simply check the file system for more info.\n  const showAdditionalInfo = !isExpoRouter || env.EXPO_DEBUG;\n\n  const assetGroups = [...groups.entries()].sort((a, b) => a[0].localeCompare(b[0])) as [\n    string,\n    [string, ExportAssetDescriptor][],\n  ][];\n\n  if (showAdditionalInfo) {\n    if (assetGroups.length) {\n      const totalAssets = assetGroups.reduce((sum, [, assets]) => sum + assets.length, 0);\n\n      Log.log('');\n      Log.log(chalk.bold`${BLT} Assets (${totalAssets}):`);\n\n      for (const [assetId, assets] of assetGroups) {\n        const averageContentSize =\n          assets.reduce((sum, [, { contents }]) => sum + contentSize(contents), 0) / assets.length;\n        Log.log(\n          assetId,\n          chalk.gray(\n            `(${[\n              assets.length > 1 ? `${assets.length} variations` : '',\n              `${prettyBytes(averageContentSize)}`,\n            ]\n              .filter(Boolean)\n              .join(' | ')})`\n          )\n        );\n      }\n    }\n  }\n\n  const bundles: Map<string, [string, ExportAssetDescriptor][]> = new Map();\n  const other: [string, ExportAssetDescriptor][] = [];\n\n  remainingEntries.forEach(([filepath, asset]) => {\n    if (!filepath.match(/_expo\\/static\\//)) {\n      other.push([filepath, asset]);\n    } else {\n      const platform = filepath.match(/_expo\\/static\\/js\\/([^/]+)\\//)?.[1] ?? 'web';\n      if (!bundles.has(platform)) bundles.set(platform, []);\n\n      bundles.get(platform)!.push([filepath, asset]);\n    }\n  });\n\n  [...bundles.entries()].forEach(([platform, assets]) => {\n    Log.log('');\n    Log.log(chalk.bold`${BLT} ${platform} bundles (${assets.length}):`);\n\n    const allAssets = assets.sort((a, b) => a[0].localeCompare(b[0]));\n    while (allAssets.length) {\n      const [filePath, asset] = allAssets.shift()!;\n      Log.log(filePath, sizeStr(asset.contents));\n      if (filePath.match(/\\.(js|hbc)$/)) {\n        // Get source map\n        const sourceMapIndex = allAssets.findIndex(([fp]) => fp === filePath + '.map');\n        if (sourceMapIndex !== -1) {\n          const [sourceMapFilePath, sourceMapAsset] = allAssets.splice(sourceMapIndex, 1)[0];\n          Log.log(chalk.gray(sourceMapFilePath), sizeStr(sourceMapAsset.contents));\n        }\n      }\n    }\n  });\n\n  if (showAdditionalInfo && other.length) {\n    Log.log('');\n    Log.log(chalk.bold`${BLT} Files (${other.length}):`);\n\n    for (const [filePath, asset] of other.sort((a, b) => a[0].localeCompare(b[0]))) {\n      Log.log(filePath, sizeStr(asset.contents));\n    }\n  }\n\n  if (rscEntries.length) {\n    Log.log('');\n    Log.log(chalk.bold`${BLT} React Server Components (${rscEntries.length}):`);\n\n    for (const [filePath, assets] of rscEntries.sort((a, b) => a[0].length - b[0].length)) {\n      const id = assets.rscId!;\n      Log.log(\n        '/' + (id === '' ? chalk.gray(' (index)') : id),\n        sizeStr(assets.contents),\n        chalk.gray(filePath)\n      );\n    }\n  }\n\n  if (routeEntries.length) {\n    Log.log('');\n    Log.log(chalk.bold`${BLT} Static routes (${routeEntries.length}):`);\n\n    for (const [, assets] of routeEntries.sort((a, b) => a[0].length - b[0].length)) {\n      const id = assets.routeId!;\n      Log.log('/' + (id === '' ? chalk.gray(' (index)') : id), sizeStr(assets.contents));\n    }\n  }\n\n  if (apiRouteEntries.length) {\n    const apiRoutesWithoutSourcemaps = apiRouteEntries.filter(\n      (route) => !route[0].endsWith('.map')\n    );\n    Log.log('');\n    Log.log(chalk.bold`${BLT} API routes (${apiRoutesWithoutSourcemaps.length}):`);\n\n    for (const [apiRouteFilename, assets] of apiRoutesWithoutSourcemaps.sort(\n      (a, b) => a[0].length - b[0].length\n    )) {\n      const id = assets.apiRouteId!;\n      const hasSourceMap = apiRouteEntries.find(\n        ([filename, route]) =>\n          filename !== apiRouteFilename &&\n          route.apiRouteId === assets.apiRouteId &&\n          filename.endsWith('.map')\n      );\n      Log.log(\n        id === '' ? chalk.gray(' (index)') : id,\n        sizeStr(assets.contents),\n        hasSourceMap ? chalk.gray(`(source map ${sizeStr(hasSourceMap[1].contents)})`) : ''\n      );\n    }\n  }\n\n  // Decouple logging from writing for better performance.\n\n  await Promise.all(\n    [...files.entries()]\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(async ([file, { contents, targetDomain }]) => {\n        // NOTE: Only use `targetDomain` if we have at least one server asset\n        const domain = (hasServerOutput && targetDomain) || '';\n        const outputPath = path.join(outputDir, domain, file);\n        await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });\n        await fs.promises.writeFile(outputPath, contents);\n      })\n  );\n\n  Log.log('');\n}\n\nfunction groupBy<T>(array: T[], key: (item: T) => string): Map<string, T[]> {\n  const map = new Map<string, T[]>();\n  array.forEach((item) => {\n    const group = key(item);\n    const list = map.get(group) ?? [];\n    list.push(item);\n    map.set(group, list);\n  });\n  return map;\n}\n\n// TODO: Move source map modification to the serializer\nexport function getFilesFromSerialAssets(\n  resources: SerialAsset[],\n  {\n    includeSourceMaps,\n    files = new Map(),\n    platform,\n    isServerHosted = platform === 'web',\n  }: {\n    includeSourceMaps: boolean;\n    files?: ExportAssetMap;\n    platform?: string;\n    isServerHosted?: boolean;\n  }\n) {\n  resources.forEach((resource) => {\n    if (resource.type === 'css-external') {\n      return;\n    }\n    files.set(resource.filename, {\n      contents: resource.source,\n      originFilename: resource.originFilename,\n      targetDomain: isServerHosted ? 'client' : undefined,\n    });\n  });\n\n  return files;\n}\n"],"names":["persistMetroFilesAsync","getFilesFromSerialAssets","BLT","files","outputDir","size","fs","mkdirSync","path","join","recursive","assetEntries","apiRouteEntries","routeEntries","rscEntries","remainingEntries","hasServerOutput","asset","entries","targetDomain","assetId","push","routeId","apiRouteId","rscId","groups","groupBy","contentSize","contents","length","Buffer","byteLength","sizeStr","chalk","gray","prettyBytes","isExpoRouter","showAdditionalInfo","env","EXPO_DEBUG","assetGroups","sort","a","b","localeCompare","totalAssets","reduce","sum","assets","Log","log","bold","averageContentSize","filter","Boolean","bundles","Map","other","forEach","filepath","match","platform","has","set","get","allAssets","filePath","shift","sourceMapIndex","findIndex","fp","sourceMapFilePath","sourceMapAsset","splice","id","apiRoutesWithoutSourcemaps","route","endsWith","apiRouteFilename","hasSourceMap","find","filename","Promise","all","map","file","domain","outputPath","promises","mkdir","dirname","writeFile","array","key","item","group","list","resources","includeSourceMaps","isServerHosted","resource","type","source","originFilename","undefined"],"mappings":"AAAA;;;;;CAKC,GACD;;;;;;;;;;;IAoDsBA,sBAAsB,MAAtBA,sBAAsB;IA4M5BC,wBAAwB,MAAxBA,wBAAwB;;;8DA/PtB,OAAO;;;;;;;8DACV,IAAI;;;;;;;8DAEF,MAAM;;;;;;;8DACC,cAAc;;;;;;qBAElB,QAAQ;qBACR,cAAc;;;;;;AAElC,MAAMC,GAAG,GAAG,GAAQ,AAAC;AA0Cd,eAAeF,sBAAsB,CAACG,KAAqB,EAAEC,SAAiB,EAAE;IACrF,IAAI,CAACD,KAAK,CAACE,IAAI,EAAE;QACf,OAAO;IACT,CAAC;IACDC,GAAE,EAAA,QAAA,CAACC,SAAS,CAACC,KAAI,EAAA,QAAA,CAACC,IAAI,CAACL,SAAS,CAAC,EAAE;QAAEM,SAAS,EAAE,IAAI;KAAE,CAAC,CAAC;IAExD,iBAAiB;IACjB,WAAW;IACX,oBAAoB;IACpB,4FAA4F;IAC5F,MAAM;IACN,KAAK;IAEL,MAAMC,YAAY,GAAsC,EAAE,AAAC;IAC3D,MAAMC,eAAe,GAAsC,EAAE,AAAC;IAC9D,MAAMC,YAAY,GAAsC,EAAE,AAAC;IAC3D,MAAMC,UAAU,GAAsC,EAAE,AAAC;IACzD,MAAMC,gBAAgB,GAAsC,EAAE,AAAC;IAE/D,IAAIC,eAAe,GAAG,KAAK,AAAC;IAC5B,KAAK,MAAMC,KAAK,IAAId,KAAK,CAACe,OAAO,EAAE,CAAE;QACnCF,eAAe,GAAGA,eAAe,IAAIC,KAAK,CAAC,CAAC,CAAC,CAACE,YAAY,KAAK,QAAQ,CAAC;QACxE,IAAIF,KAAK,CAAC,CAAC,CAAC,CAACG,OAAO,EAAET,YAAY,CAACU,IAAI,CAACJ,KAAK,CAAC,CAAC;aAC1C,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACK,OAAO,IAAI,IAAI,EAAET,YAAY,CAACQ,IAAI,CAACJ,KAAK,CAAC,CAAC;aACvD,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACM,UAAU,IAAI,IAAI,EAAEX,eAAe,CAACS,IAAI,CAACJ,KAAK,CAAC,CAAC;aAC7D,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACO,KAAK,IAAI,IAAI,EAAEV,UAAU,CAACO,IAAI,CAACJ,KAAK,CAAC,CAAC;aACnDF,gBAAgB,CAACM,IAAI,CAACJ,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,MAAMQ,MAAM,GAAGC,OAAO,CAACf,YAAY,EAAE,CAAC,GAAG,EAAES,OAAO,CAAA,EAAE,CAAC,GAAKA,OAAO,AAAC,CAAC,AAAC;IAEpE,MAAMO,WAAW,GAAG,CAACC,QAAyB,GAAK;QACjD,MAAMC,MAAM,GACV,OAAOD,QAAQ,KAAK,QAAQ,GAAGE,MAAM,CAACC,UAAU,CAACH,QAAQ,EAAE,MAAM,CAAC,GAAGA,QAAQ,CAACC,MAAM,AAAC;QACvF,OAAOA,MAAM,CAAC;IAChB,CAAC,AAAC;IAEF,MAAMG,OAAO,GAAG,CAACJ,QAAyB,GAAK;QAC7C,MAAMC,MAAM,GAAGF,WAAW,CAACC,QAAQ,CAAC,AAAC;QACrC,MAAMvB,IAAI,GAAG4B,MAAK,EAAA,QAAA,CAACC,IAAI,CAAC,CAAC,EAAEC,IAAAA,YAAW,EAAA,QAAA,EAACN,MAAM,CAAC,CAAC,CAAC,CAAC,AAAC;QAClD,OAAOxB,IAAI,CAAC;IACd,CAAC,AAAC;IAEF,+EAA+E;IAC/E,gDAAgD;IAChD,uBAAuB;IACvB,UAAU;IACV,yBAAyB;IAEzB,MAAM+B,YAAY,GAAGvB,YAAY,CAACgB,MAAM,AAAC;IAEzC,6FAA6F;IAC7F,MAAMQ,kBAAkB,GAAG,CAACD,YAAY,IAAIE,IAAG,IAAA,CAACC,UAAU,AAAC;IAE3D,MAAMC,WAAW,GAAG;WAAIf,MAAM,CAACP,OAAO,EAAE;KAAC,CAACuB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAAC,CAAC,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAG/E,AAAC;IAEJ,IAAIN,kBAAkB,EAAE;QACtB,IAAIG,WAAW,CAACX,MAAM,EAAE;YACtB,MAAMgB,WAAW,GAAGL,WAAW,CAACM,MAAM,CAAC,CAACC,GAAG,EAAE,GAAGC,MAAM,CAAC,GAAKD,GAAG,GAAGC,MAAM,CAACnB,MAAM,EAAE,CAAC,CAAC,AAAC;YAEpFoB,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;YACZD,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACkB,IAAI,CAAC,EAAEjD,GAAG,CAAC,SAAS,EAAE2C,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;YAErD,KAAK,MAAM,CAACzB,OAAO,EAAE4B,MAAM,CAAC,IAAIR,WAAW,CAAE;gBAC3C,MAAMY,kBAAkB,GACtBJ,MAAM,CAACF,MAAM,CAAC,CAACC,GAAG,EAAE,GAAG,EAAEnB,QAAQ,CAAA,EAAE,CAAC,GAAKmB,GAAG,GAAGpB,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAGoB,MAAM,CAACnB,MAAM,AAAC;gBAC3FoB,IAAG,IAAA,CAACC,GAAG,CACL9B,OAAO,EACPa,MAAK,EAAA,QAAA,CAACC,IAAI,CACR,CAAC,CAAC,EAAE;oBACFc,MAAM,CAACnB,MAAM,GAAG,CAAC,GAAG,CAAC,EAAEmB,MAAM,CAACnB,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;oBACtD,CAAC,EAAEM,IAAAA,YAAW,EAAA,QAAA,EAACiB,kBAAkB,CAAC,CAAC,CAAC;iBACrC,CACEC,MAAM,CAACC,OAAO,CAAC,CACf7C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAClB,CACF,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM8C,OAAO,GAAmD,IAAIC,GAAG,EAAE,AAAC;IAC1E,MAAMC,KAAK,GAAsC,EAAE,AAAC;IAEpD1C,gBAAgB,CAAC2C,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAE1C,KAAK,CAAC,GAAK;QAC9C,IAAI,CAAC0C,QAAQ,CAACC,KAAK,mBAAmB,EAAE;YACtCH,KAAK,CAACpC,IAAI,CAAC;gBAACsC,QAAQ;gBAAE1C,KAAK;aAAC,CAAC,CAAC;QAChC,OAAO;gBACY0C,GAA8C;YAA/D,MAAME,QAAQ,GAAGF,CAAAA,CAAAA,GAA8C,GAA9CA,QAAQ,CAACC,KAAK,gCAAgC,SAAK,GAAnDD,KAAAA,CAAmD,GAAnDA,GAA8C,AAAE,CAAC,CAAC,CAAC,CAAA,IAAI,KAAK,AAAC;YAC9E,IAAI,CAACJ,OAAO,CAACO,GAAG,CAACD,QAAQ,CAAC,EAAEN,OAAO,CAACQ,GAAG,CAACF,QAAQ,EAAE,EAAE,CAAC,CAAC;YAEtDN,OAAO,CAACS,GAAG,CAACH,QAAQ,CAAC,CAAExC,IAAI,CAAC;gBAACsC,QAAQ;gBAAE1C,KAAK;aAAC,CAAC,CAAC;QACjD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;WAAIsC,OAAO,CAACrC,OAAO,EAAE;KAAC,CAACwC,OAAO,CAAC,CAAC,CAACG,QAAQ,EAAEb,MAAM,CAAC,GAAK;QACrDC,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;QACZD,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACkB,IAAI,CAAC,EAAEjD,GAAG,CAAC,CAAC,EAAE2D,QAAQ,CAAC,UAAU,EAAEb,MAAM,CAACnB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpE,MAAMoC,SAAS,GAAGjB,MAAM,CAACP,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAAC,CAAC,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAAC;QAClE,MAAOsB,SAAS,CAACpC,MAAM,CAAE;YACvB,MAAM,CAACqC,QAAQ,EAAEjD,KAAK,CAAC,GAAGgD,SAAS,CAACE,KAAK,EAAE,AAAC,AAAC;YAC7ClB,IAAG,IAAA,CAACC,GAAG,CAACgB,QAAQ,EAAElC,OAAO,CAACf,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC;YAC3C,IAAIsC,QAAQ,CAACN,KAAK,eAAe,EAAE;gBACjC,iBAAiB;gBACjB,MAAMQ,cAAc,GAAGH,SAAS,CAACI,SAAS,CAAC,CAAC,CAACC,EAAE,CAAC,GAAKA,EAAE,KAAKJ,QAAQ,GAAG,MAAM,CAAC,AAAC;gBAC/E,IAAIE,cAAc,KAAK,CAAC,CAAC,EAAE;oBACzB,MAAM,CAACG,iBAAiB,EAAEC,cAAc,CAAC,GAAGP,SAAS,CAACQ,MAAM,CAACL,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,AAAC;oBACnFnB,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACC,IAAI,CAACqC,iBAAiB,CAAC,EAAEvC,OAAO,CAACwC,cAAc,CAAC5C,QAAQ,CAAC,CAAC,CAAC;gBAC3E,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,IAAIS,kBAAkB,IAAIoB,KAAK,CAAC5B,MAAM,EAAE;QACtCoB,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;QACZD,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACkB,IAAI,CAAC,EAAEjD,GAAG,CAAC,QAAQ,EAAEuD,KAAK,CAAC5B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAErD,KAAK,MAAM,CAACqC,QAAQ,EAAEjD,MAAK,CAAC,IAAIwC,KAAK,CAAChB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAAC,CAAC,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;YAC9EM,IAAG,IAAA,CAACC,GAAG,CAACgB,QAAQ,EAAElC,OAAO,CAACf,MAAK,CAACW,QAAQ,CAAC,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,IAAId,UAAU,CAACe,MAAM,EAAE;QACrBoB,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;QACZD,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACkB,IAAI,CAAC,EAAEjD,GAAG,CAAC,0BAA0B,EAAEY,UAAU,CAACe,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAE5E,KAAK,MAAM,CAACqC,SAAQ,EAAElB,OAAM,CAAC,IAAIlC,UAAU,CAAC2B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAAC,CAAC,CAAC,CAACb,MAAM,GAAGc,CAAC,CAAC,CAAC,CAAC,CAACd,MAAM,CAAC,CAAE;YACrF,MAAM6C,EAAE,GAAG1B,OAAM,CAACxB,KAAK,AAAC,AAAC;YACzByB,IAAG,IAAA,CAACC,GAAG,CACL,GAAG,GAAG,CAACwB,EAAE,KAAK,EAAE,GAAGzC,MAAK,EAAA,QAAA,CAACC,IAAI,CAAC,UAAU,CAAC,GAAGwC,EAAE,CAAC,EAC/C1C,OAAO,CAACgB,OAAM,CAACpB,QAAQ,CAAC,EACxBK,MAAK,EAAA,QAAA,CAACC,IAAI,CAACgC,SAAQ,CAAC,CACrB,CAAC;QACJ,CAAC;IACH,CAAC;IAED,IAAIrD,YAAY,CAACgB,MAAM,EAAE;QACvBoB,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;QACZD,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACkB,IAAI,CAAC,EAAEjD,GAAG,CAAC,gBAAgB,EAAEW,YAAY,CAACgB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpE,KAAK,MAAM,GAAGmB,OAAM,CAAC,IAAInC,YAAY,CAAC4B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAAC,CAAC,CAAC,CAACb,MAAM,GAAGc,CAAC,CAAC,CAAC,CAAC,CAACd,MAAM,CAAC,CAAE;YAC/E,MAAM6C,GAAE,GAAG1B,OAAM,CAAC1B,OAAO,AAAC,AAAC;YAC3B2B,IAAG,IAAA,CAACC,GAAG,CAAC,GAAG,GAAG,CAACwB,GAAE,KAAK,EAAE,GAAGzC,MAAK,EAAA,QAAA,CAACC,IAAI,CAAC,UAAU,CAAC,GAAGwC,GAAE,CAAC,EAAE1C,OAAO,CAACgB,OAAM,CAACpB,QAAQ,CAAC,CAAC,CAAC;QACrF,CAAC;IACH,CAAC;IAED,IAAIhB,eAAe,CAACiB,MAAM,EAAE;QAC1B,MAAM8C,0BAA0B,GAAG/D,eAAe,CAACyC,MAAM,CACvD,CAACuB,KAAK,GAAK,CAACA,KAAK,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,CACtC,AAAC;QACF5B,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;QACZD,IAAG,IAAA,CAACC,GAAG,CAACjB,MAAK,EAAA,QAAA,CAACkB,IAAI,CAAC,EAAEjD,GAAG,CAAC,aAAa,EAAEyE,0BAA0B,CAAC9C,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAE/E,KAAK,MAAM,CAACiD,gBAAgB,EAAE9B,OAAM,CAAC,IAAI2B,0BAA0B,CAAClC,IAAI,CACtE,CAACC,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAAC,CAAC,CAAC,CAACb,MAAM,GAAGc,CAAC,CAAC,CAAC,CAAC,CAACd,MAAM,CACpC,CAAE;YACD,MAAM6C,GAAE,GAAG1B,OAAM,CAACzB,UAAU,AAAC,AAAC;YAC9B,MAAMwD,YAAY,GAAGnE,eAAe,CAACoE,IAAI,CACvC,CAAC,CAACC,QAAQ,EAAEL,KAAK,CAAC,GAChBK,QAAQ,KAAKH,gBAAgB,IAC7BF,KAAK,CAACrD,UAAU,KAAKyB,OAAM,CAACzB,UAAU,IACtC0D,QAAQ,CAACJ,QAAQ,CAAC,MAAM,CAAC,CAC5B,AAAC;YACF5B,IAAG,IAAA,CAACC,GAAG,CACLwB,GAAE,KAAK,EAAE,GAAGzC,MAAK,EAAA,QAAA,CAACC,IAAI,CAAC,UAAU,CAAC,GAAGwC,GAAE,EACvC1C,OAAO,CAACgB,OAAM,CAACpB,QAAQ,CAAC,EACxBmD,YAAY,GAAG9C,MAAK,EAAA,QAAA,CAACC,IAAI,CAAC,CAAC,YAAY,EAAEF,OAAO,CAAC+C,YAAY,CAAC,CAAC,CAAC,CAACnD,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CACpF,CAAC;QACJ,CAAC;IACH,CAAC;IAED,wDAAwD;IAExD,MAAMsD,OAAO,CAACC,GAAG,CACf;WAAIhF,KAAK,CAACe,OAAO,EAAE;KAAC,CACjBuB,IAAI,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE,CAACC,CAAC,CAAC,GAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC,CACtCyC,GAAG,CAAC,OAAO,CAACC,IAAI,EAAE,EAAEzD,QAAQ,CAAA,EAAET,YAAY,CAAA,EAAE,CAAC,GAAK;QACjD,qEAAqE;QACrE,MAAMmE,MAAM,GAAG,AAACtE,eAAe,IAAIG,YAAY,IAAK,EAAE,AAAC;QACvD,MAAMoE,UAAU,GAAG/E,KAAI,EAAA,QAAA,CAACC,IAAI,CAACL,SAAS,EAAEkF,MAAM,EAAED,IAAI,CAAC,AAAC;QACtD,MAAM/E,GAAE,EAAA,QAAA,CAACkF,QAAQ,CAACC,KAAK,CAACjF,KAAI,EAAA,QAAA,CAACkF,OAAO,CAACH,UAAU,CAAC,EAAE;YAAE7E,SAAS,EAAE,IAAI;SAAE,CAAC,CAAC;QACvE,MAAMJ,GAAE,EAAA,QAAA,CAACkF,QAAQ,CAACG,SAAS,CAACJ,UAAU,EAAE3D,QAAQ,CAAC,CAAC;IACpD,CAAC,CAAC,CACL,CAAC;IAEFqB,IAAG,IAAA,CAACC,GAAG,CAAC,EAAE,CAAC,CAAC;AACd,CAAC;AAED,SAASxB,OAAO,CAAIkE,KAAU,EAAEC,GAAwB,EAAoB;IAC1E,MAAMT,GAAG,GAAG,IAAI5B,GAAG,EAAe,AAAC;IACnCoC,KAAK,CAAClC,OAAO,CAAC,CAACoC,IAAI,GAAK;QACtB,MAAMC,KAAK,GAAGF,GAAG,CAACC,IAAI,CAAC,AAAC;QACxB,MAAME,IAAI,GAAGZ,GAAG,CAACpB,GAAG,CAAC+B,KAAK,CAAC,IAAI,EAAE,AAAC;QAClCC,IAAI,CAAC3E,IAAI,CAACyE,IAAI,CAAC,CAAC;QAChBV,GAAG,CAACrB,GAAG,CAACgC,KAAK,EAAEC,IAAI,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IACH,OAAOZ,GAAG,CAAC;AACb,CAAC;AAGM,SAASnF,wBAAwB,CACtCgG,SAAwB,EACxB,EACEC,iBAAiB,CAAA,EACjB/F,KAAK,EAAG,IAAIqD,GAAG,EAAE,CAAA,EACjBK,QAAQ,CAAA,EACRsC,cAAc,EAAGtC,QAAQ,KAAK,KAAK,CAAA,EAMpC,EACD;IACAoC,SAAS,CAACvC,OAAO,CAAC,CAAC0C,QAAQ,GAAK;QAC9B,IAAIA,QAAQ,CAACC,IAAI,KAAK,cAAc,EAAE;YACpC,OAAO;QACT,CAAC;QACDlG,KAAK,CAAC4D,GAAG,CAACqC,QAAQ,CAACnB,QAAQ,EAAE;YAC3BrD,QAAQ,EAAEwE,QAAQ,CAACE,MAAM;YACzBC,cAAc,EAAEH,QAAQ,CAACG,cAAc;YACvCpF,YAAY,EAAEgF,cAAc,GAAG,QAAQ,GAAGK,SAAS;SACpD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAOrG,KAAK,CAAC;AACf,CAAC"}