{"version":3,"sources":["../../../src/export/exportApp.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport type { Platform } from '@expo/config';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { type PlatformMetadata, createMetadataJson } from './createMetadataJson';\nimport { exportAssetsAsync } from './exportAssets';\nimport {\n  exportDomComponentAsync,\n  updateDomComponentAssetsForMD5Naming,\n} from './exportDomComponents';\nimport { assertEngineMismatchAsync, isEnableHermesManaged } from './exportHermes';\nimport { exportApiRoutesStandaloneAsync, exportFromServerAsync } from './exportStaticAsync';\nimport { getVirtualFaviconAssetsAsync } from './favicon';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { copyPublicFolderAsync } from './publicFolder';\nimport { Options } from './resolveOptions';\nimport {\n  ExportAssetMap,\n  BundleOutput,\n  getFilesFromSerialAssets,\n  persistMetroFilesAsync,\n} from './saveAssets';\nimport { createAssetMap } from './writeContents';\nimport * as Log from '../log';\nimport { WebSupportProjectPrerequisite } from '../start/doctor/web/WebSupportProjectPrerequisite';\nimport { DevServerManager } from '../start/server/DevServerManager';\nimport { MetroBundlerDevServer } from '../start/server/metro/MetroBundlerDevServer';\nimport { getRouterDirectoryModuleIdWithManifest } from '../start/server/metro/router';\nimport { serializeHtmlWithAssets } from '../start/server/metro/serializeHtml';\nimport { getEntryWithServerRoot } from '../start/server/middleware/ManifestMiddleware';\nimport { getBaseUrlFromExpoConfig } from '../start/server/middleware/metroOptions';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../start/server/webTemplate';\nimport { env } from '../utils/env';\nimport { CommandError } from '../utils/errors';\nimport { setNodeEnv } from '../utils/nodeEnv';\n\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    sourceMaps,\n    minify,\n    bytecode,\n    maxWorkers,\n    skipSSG,\n  }: Pick<\n    Options,\n    | 'dumpAssetmap'\n    | 'sourceMaps'\n    | 'dev'\n    | 'clear'\n    | 'outputDir'\n    | 'platforms'\n    | 'minify'\n    | 'bytecode'\n    | 'maxWorkers'\n    | 'skipSSG'\n  >\n): Promise<void> {\n  setNodeEnv(dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const projectConfig = getConfig(projectRoot);\n  const exp = await getPublicExpoManifestAsync(projectRoot, {\n    // Web doesn't require validation.\n    skipValidation: platforms.length === 1 && platforms[0] === 'web',\n  });\n\n  if (platforms.includes('web')) {\n    await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n  }\n\n  const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n\n  if (skipSSG && exp.web?.output !== 'server') {\n    throw new CommandError('--no-ssg can only be used with `web.output: server`');\n  }\n\n  const baseUrl = getBaseUrlFromExpoConfig(exp);\n\n  if (!bytecode && (platforms.includes('ios') || platforms.includes('android'))) {\n    Log.warn(\n      `Bytecode makes the app startup faster, disabling bytecode is highly discouraged and should only be used for debugging purposes.`\n    );\n  }\n\n  // Print out logs\n  if (baseUrl) {\n    Log.log();\n    Log.log(chalk.gray`Using (experimental) base path: ${baseUrl}`);\n    // Warn if not using an absolute path.\n    if (!baseUrl.startsWith('/')) {\n      Log.log(\n        chalk.yellow`  Base path does not start with a slash. Requests will not be absolute.`\n      );\n    }\n  }\n\n  const mode = dev ? 'development' : 'production';\n  const publicPath = path.resolve(projectRoot, env.EXPO_PUBLIC_FOLDER);\n  const outputPath = path.resolve(projectRoot, outputDir);\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n\n  const files: ExportAssetMap = new Map();\n\n  const devServerManager = await DevServerManager.startMetroAsync(projectRoot, {\n    minify,\n    mode,\n    port: 8081,\n    isExporting: true,\n    location: {},\n    resetDevServer: clear,\n    maxWorkers,\n  });\n\n  const devServer = devServerManager.getDefaultDevServer();\n  assert(devServer instanceof MetroBundlerDevServer);\n\n  const bundles: Partial<Record<Platform, BundleOutput>> = {};\n  const domComponentAssetsMetadata: Partial<Record<Platform, PlatformMetadata['assets']>> = {};\n\n  const spaPlatforms = useServerRendering\n    ? platforms.filter((platform) => platform !== 'web')\n    : platforms;\n\n  try {\n    // NOTE(kitten): The public folder is currently always copied, regardless of targetDomain\n    // split. Hence, there's another separate `copyPublicFolderAsync` call below for `web`\n    await copyPublicFolderAsync(publicPath, outputPath);\n\n    // Can be empty during web-only SSG.\n    if (spaPlatforms.length) {\n      await Promise.all(\n        spaPlatforms.map(async (platform) => {\n          // Assert early so the user doesn't have to wait until bundling is complete to find out that\n          // Hermes won't be available.\n          const isHermes = isEnableHermesManaged(exp, platform);\n          if (isHermes) {\n            await assertEngineMismatchAsync(projectRoot, exp, platform);\n          }\n\n          // Run metro bundler and create the JS bundles/source maps.\n          const bundle = await devServer.nativeExportBundleAsync(\n            {\n              platform,\n              splitChunks:\n                !env.EXPO_NO_BUNDLE_SPLITTING &&\n                ((devServer.isReactServerComponentsEnabled && !bytecode) || platform === 'web'),\n              mainModuleName: getEntryWithServerRoot(projectRoot, {\n                platform,\n                pkg: projectConfig.pkg,\n              }),\n              mode: dev ? 'development' : 'production',\n              engine: isHermes ? 'hermes' : undefined,\n              serializerIncludeMaps: sourceMaps,\n              bytecode: bytecode && isHermes,\n              reactCompiler: !!exp.experiments?.reactCompiler,\n            },\n            files\n          );\n\n          bundles[platform] = bundle;\n          domComponentAssetsMetadata[platform] = [];\n\n          getFilesFromSerialAssets(bundle.artifacts, {\n            includeSourceMaps: sourceMaps,\n            files,\n            isServerHosted: devServer.isReactServerComponentsEnabled,\n          });\n\n          // TODO: Remove duplicates...\n          const expoDomComponentReferences = bundle.artifacts\n            .map((artifact) =>\n              Array.isArray(artifact.metadata.expoDomComponentReferences)\n                ? artifact.metadata.expoDomComponentReferences\n                : []\n            )\n            .flat();\n          await Promise.all(\n            // TODO: Make a version of this which uses `this.metro.getBundler().buildGraphForEntries([])` to bundle all the DOM components at once.\n            expoDomComponentReferences.map(async (filePath) => {\n              const { bundle: platformDomComponentsBundle, htmlOutputName } =\n                await exportDomComponentAsync({\n                  filePath,\n                  projectRoot,\n                  dev,\n                  devServer,\n                  isHermes,\n                  includeSourceMaps: sourceMaps,\n                  exp,\n                  files,\n                });\n\n              // Merge the assets from the DOM component into the output assets.\n              // @ts-expect-error: mutate assets\n              bundle.assets.push(...platformDomComponentsBundle.assets);\n\n              const assetsMetadata = updateDomComponentAssetsForMD5Naming({\n                domComponentReference: filePath,\n                nativeBundle: bundle,\n                domComponentBundle: platformDomComponentsBundle,\n                files,\n                htmlOutputName,\n              });\n              domComponentAssetsMetadata[platform]?.push(...assetsMetadata);\n            })\n          );\n\n          if (platform === 'web') {\n            // TODO: Unify with exportStaticAsync\n            // TODO: Maybe move to the serializer.\n            let html = await serializeHtmlWithAssets({\n              isExporting: true,\n              resources: bundle.artifacts,\n              template: await createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n                scripts: [],\n                cssLinks: [],\n                exp: projectConfig.exp,\n              }),\n              baseUrl,\n            });\n\n            // Add the favicon assets to the HTML.\n            const modifyHtml = await getVirtualFaviconAssetsAsync(projectRoot, {\n              outputDir,\n              baseUrl,\n              files,\n              exp: projectConfig.exp,\n            });\n            if (modifyHtml) {\n              html = modifyHtml(html);\n            }\n\n            // Generate SPA-styled HTML file.\n            // If web exists, then write the template HTML file.\n            files.set('index.html', {\n              contents: html,\n              targetDomain: devServer.isReactServerComponentsEnabled ? 'server' : 'client',\n            });\n          }\n        })\n      );\n\n      if (devServer.isReactServerComponentsEnabled) {\n        const isWeb = platforms.includes('web');\n        if (!(isWeb && useServerRendering)) {\n          await exportApiRoutesStandaloneAsync(devServer, {\n            files,\n            platform: 'web',\n            apiRoutesOnly: !isWeb,\n          });\n        }\n      }\n\n      // TODO: Use same asset system across platforms again.\n      const { assets, embeddedHashSet } = await exportAssetsAsync(projectRoot, {\n        files,\n        exp,\n        outputDir: outputPath,\n        bundles,\n        baseUrl,\n      });\n\n      if (dumpAssetmap) {\n        Log.log('Creating asset map');\n        files.set('assetmap.json', { contents: JSON.stringify(createAssetMap({ assets })) });\n      }\n\n      const fileNames = Object.fromEntries(\n        Object.entries(bundles).map(([platform, bundle]) => [\n          platform,\n          bundle.artifacts.filter((asset) => asset.type === 'js').map((asset) => asset.filename),\n        ])\n      );\n\n      // Generate a `metadata.json` for EAS Update.\n      const contents = createMetadataJson({\n        bundles,\n        fileNames,\n        embeddedHashSet,\n        domComponentAssetsMetadata,\n      });\n      files.set('metadata.json', { contents: JSON.stringify(contents) });\n    }\n\n    // Additional web-only steps...\n\n    if (platforms.includes('web') && useServerRendering) {\n      const exportServer = exp.web?.output === 'server';\n\n      if (exportServer) {\n        // TODO: Remove when this is abstracted into the files map\n        await copyPublicFolderAsync(publicPath, path.resolve(outputPath, 'client'));\n      }\n\n      if (skipSSG) {\n        Log.log('Skipping static site generation');\n        await exportApiRoutesStandaloneAsync(devServer, {\n          files,\n          platform: 'web',\n          apiRoutesOnly: true,\n        });\n\n        // Output a placeholder index.html if one doesn't exist in the public directory.\n        // This ensures native + API routes have some content at the root URL.\n        const placeholderIndex = path.resolve(outputPath, 'client/index.html');\n        if (!fs.existsSync(placeholderIndex)) {\n          files.set('index.html', {\n            contents: `<html><body></body></html>`,\n            targetDomain: 'client',\n          });\n        }\n      } else {\n        await exportFromServerAsync(projectRoot, devServer, {\n          mode,\n          files,\n          clear: !!clear,\n          outputDir: outputPath,\n          minify,\n          baseUrl,\n          includeSourceMaps: sourceMaps,\n          routerRoot: getRouterDirectoryModuleIdWithManifest(projectRoot, exp),\n          reactCompiler: !!exp.experiments?.reactCompiler,\n          exportServer,\n          maxWorkers,\n          isExporting: true,\n          exp: projectConfig.exp,\n        });\n      }\n    }\n  } finally {\n    await devServerManager.stopAsync();\n  }\n\n  // Write all files at the end for unified logging.\n  await persistMetroFilesAsync(files, outputPath);\n}\n"],"names":["exportAppAsync","projectRoot","platforms","outputDir","clear","dev","dumpAssetmap","sourceMaps","minify","bytecode","maxWorkers","skipSSG","exp","setNodeEnv","require","load","projectConfig","getConfig","getPublicExpoManifestAsync","skipValidation","length","includes","WebSupportProjectPrerequisite","assertAsync","useServerRendering","web","output","CommandError","baseUrl","getBaseUrlFromExpoConfig","Log","warn","log","chalk","gray","startsWith","yellow","mode","publicPath","path","resolve","env","EXPO_PUBLIC_FOLDER","outputPath","files","Map","devServerManager","DevServerManager","startMetroAsync","port","isExporting","location","resetDevServer","devServer","getDefaultDevServer","assert","MetroBundlerDevServer","bundles","domComponentAssetsMetadata","spaPlatforms","filter","platform","copyPublicFolderAsync","Promise","all","map","isHermes","isEnableHermesManaged","assertEngineMismatchAsync","bundle","nativeExportBundleAsync","splitChunks","EXPO_NO_BUNDLE_SPLITTING","isReactServerComponentsEnabled","mainModuleName","getEntryWithServerRoot","pkg","engine","undefined","serializerIncludeMaps","reactCompiler","experiments","getFilesFromSerialAssets","artifacts","includeSourceMaps","isServerHosted","expoDomComponentReferences","artifact","Array","isArray","metadata","flat","filePath","platformDomComponentsBundle","htmlOutputName","exportDomComponentAsync","assets","push","assetsMetadata","updateDomComponentAssetsForMD5Naming","domComponentReference","nativeBundle","domComponentBundle","html","serializeHtmlWithAssets","resources","template","createTemplateHtmlFromExpoConfigAsync","scripts","cssLinks","modifyHtml","getVirtualFaviconAssetsAsync","set","contents","targetDomain","isWeb","exportApiRoutesStandaloneAsync","apiRoutesOnly","embeddedHashSet","exportAssetsAsync","JSON","stringify","createAssetMap","fileNames","Object","fromEntries","entries","asset","type","filename","createMetadataJson","exportServer","placeholderIndex","fs","existsSync","exportFromServerAsync","routerRoot","getRouterDirectoryModuleIdWithManifest","stopAsync","persistMetroFilesAsync"],"mappings":"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"}