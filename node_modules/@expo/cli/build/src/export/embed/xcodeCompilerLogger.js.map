{"version":3,"sources":["../../../../src/export/embed/xcodeCompilerLogger.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs';\nimport path from 'path';\n\nimport { Log } from '../../log';\n\nfunction isPossiblyUnableToResolveError(\n  error: any\n): error is { message: string; originModulePath: string; targetModuleName: string } {\n  return (\n    'message' in error &&\n    typeof error.message === 'string' &&\n    'originModulePath' in error &&\n    typeof error.originModulePath === 'string' &&\n    'targetModuleName' in error &&\n    typeof error.targetModuleName === 'string'\n  );\n}\nfunction isPossiblyTransformError(\n  error: any\n): error is { message: string; filename: string; lineNumber: number; column?: number } {\n  return (\n    'message' in error &&\n    typeof error.message === 'string' &&\n    'filename' in error &&\n    typeof error.filename === 'string' &&\n    'lineNumber' in error &&\n    typeof error.lineNumber === 'number'\n  );\n}\n\nexport function getXcodeCompilerErrorMessage(\n  projectRoot: string,\n  error: Error | any\n): string | null {\n  const makeFilepathAbsolute = (filepath: string) =>\n    filepath.startsWith('/') ? filepath : path.join(projectRoot, filepath);\n\n  if (typeof error === 'string') {\n    return makeXcodeCompilerLog('error', error);\n  } else if ('message' in error) {\n    // Metro's `UnableToResolveError`\n    if (isPossiblyUnableToResolveError(error)) {\n      const loc = getLineNumberForStringInFile(error.originModulePath, error.targetModuleName);\n      return makeXcodeCompilerLog('error', error.message, {\n        fileName: error.originModulePath,\n        lineNumber: loc?.lineNumber,\n        column: loc?.column,\n      });\n    } else if (isPossiblyTransformError(error)) {\n      return makeXcodeCompilerLog('error', error.message, {\n        // Metro generally returns the filename as relative from the project root.\n        fileName: makeFilepathAbsolute(error.filename),\n        lineNumber: error.lineNumber,\n        column: error.column,\n      });\n      // TODO: ResourceNotFoundError, GraphNotFoundError, RevisionNotFoundError, AmbiguousModuleResolutionError\n    } else {\n      // Unknown error\n      return makeXcodeCompilerLog('error', error.message);\n    }\n  }\n\n  return null;\n}\n\n/** Log an error that can be parsed by Xcode and related build tools https://developer.apple.com/documentation/xcode/running-custom-scripts-during-a-build#Log-errors-and-warnings-from-your-script */\nexport function logMetroErrorInXcode(projectRoot: string, error: Error | string) {\n  const message = getXcodeCompilerErrorMessage(projectRoot, error);\n  if (message != null) {\n    console.error(message);\n  }\n}\n\nexport function logInXcode(message: string) {\n  Log.log(makeXcodeCompilerLog('note', message));\n}\n\nexport function warnInXcode(message: string) {\n  Log.warn(makeXcodeCompilerLog('warning', message));\n}\n\n// Detect running in xcode build script. This means the logs need to be formatted in a way that Xcode can parse them, it also means that the shell is not reliable or interactive.\n// https://developer.apple.com/documentation/xcode/running-custom-scripts-during-a-build#Access-script-related-files-from-environment-variables\nexport function isExecutingFromXcodebuild() {\n  return !!process.env.BUILT_PRODUCTS_DIR;\n}\n\nfunction makeXcodeCompilerLog(\n  type: 'error' | 'fatal error' | 'warning' | 'note',\n  message: string,\n  {\n    fileName,\n    lineNumber,\n    column,\n  }: {\n    /** Absolute file path to link to in Xcode. */\n    fileName?: string;\n    lineNumber?: number;\n    column?: number;\n  } = {}\n) {\n  if (!isExecutingFromXcodebuild()) {\n    return message;\n  }\n  // TODO: Figure out how to support multi-line logs.\n  const firstLine = message.split('\\n')[0];\n  if (fileName && !fileName?.includes(':')) {\n    return `${fileName}:${lineNumber || 0}:${\n      column != null ? column + ':' : ''\n    } ${type}: ${firstLine}`;\n  }\n  return `${type}: ${firstLine}`;\n}\n\n// TODO: Metro doesn't expose this info even though it knows it.\nfunction getLineNumberForStringInFile(originModulePath: string, targetModuleName: string) {\n  let file;\n  try {\n    file = fs.readFileSync(originModulePath, 'utf8');\n  } catch (error: any) {\n    if (error.code === 'ENOENT' || error.code === 'EISDIR') {\n      // We're probably dealing with a virtualised file system where\n      // `this.originModulePath` doesn't actually exist on disk.\n      // We can't show a code frame, but there's no need to let this I/O\n      // error shadow the original module resolution error.\n      return null;\n    }\n    throw error;\n  }\n  const lines = file.split('\\n');\n  let lineNumber = 0;\n  let column = -1;\n  for (let line = 0; line < lines.length; line++) {\n    const columnLocation = lines[line].lastIndexOf(targetModuleName);\n    if (columnLocation >= 0) {\n      lineNumber = line;\n      column = columnLocation;\n      break;\n    }\n  }\n  return { lineNumber, column };\n}\n"],"names":["getXcodeCompilerErrorMessage","logMetroErrorInXcode","logInXcode","warnInXcode","isExecutingFromXcodebuild","isPossiblyUnableToResolveError","error","message","originModulePath","targetModuleName","isPossiblyTransformError","filename","lineNumber","projectRoot","makeFilepathAbsolute","filepath","startsWith","path","join","makeXcodeCompilerLog","loc","getLineNumberForStringInFile","fileName","column","console","Log","log","warn","process","env","BUILT_PRODUCTS_DIR","type","firstLine","split","includes","file","fs","readFileSync","code","lines","line","length","columnLocation","lastIndexOf"],"mappings":"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"}