import{makeSubject as r,mergeMap as e,filter as t,takeUntil as o,debounce as n,fromValue as a,merge as u}from"wonka";import{makeOperation as i}from"@urql/core";var l=l=>{var{retryIf:y,retryWith:d}=l,m=l.initialDelayMs||1e3,c=l.maxDelayMs||15e3,p=l.maxNumberAttempts||2,k=null==l.randomDelay||!!l.randomDelay;return({forward:l})=>v=>{var{source:x,next:f}=r(),s=e((r=>{var e=r.context.retry||{count:0,delay:null},u=++e.count,l=e.delay||m,y=Math.random()+1.5;k?l*y<c?l*=y:l=c:l=Math.min(u*m,c),e.delay=l;var d=t((e=>("query"===e.kind||"teardown"===e.kind)&&e.key===r.key))(v);return o(d)(n((()=>l))(a(i(r.kind,r,{...r.context,retry:e}))))}))(x);return t((r=>{var e=r.operation.context.retry;if(!r.error||!(y?y(r.error,r.operation):d||r.error.networkError))return e&&(e.count=0,e.delay=null),!0;if(!((e&&e.count||0)>=p-1)){var t=d?d(r.error,r.operation):r.operation;return!t||(f(t),!1)}return!0}))(l(u([v,s])))}};export{l as retryExchange};
//# sourceMappingURL=urql-exchange-retry.min.mjs.map
